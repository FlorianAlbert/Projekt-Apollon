@page "/user/dungeons"

@using Apollon.Mud.Shared.Dungeon
@using Apollon.Mud.Client.Shared.Components

@inject NavigationManager NavManager
@inject Apollon.Mud.Client.Services.Interfaces.IDungeonService DungeonService

<AuthorizeView>
    <Authorized>
        <div class="container-fluid">
            <div class="jumbotron mt-5 mb-5 bg-transparent">
                <div class="container">
                    <h1 class="display-3 text-white">Deine Dungeons!</h1>
                    <p class="text-white">Hier kannst du die von dir erstellten Dungeons verwalten </p>
                    <p class="text-white">Falls du noch keinen Dungeon erstellt hast, kannst du hier auch neue Dungeons anlegen.</p>
                    <a class="btn btn-primary btn-lg" href="/dungeon/create">Neuer Dungeon</a>
                </div>
            </div>
        </div>

        <div class="dungeons py-5 bg-light mb-5" style="min-height:50rem">
            <div class="container">
                <div class="row">
                    @if (userDungeons.Count == 0)
                    {
                        <h2 class="text-muted">Du hast noch keinen eigenen Dungeon erstellt.</h2>

                    }
                    @foreach (DungeonDto dungeon in userDungeons)
                    {
                        @if (dungeon.Status == 0)
                        {
                            <div class="col-md-4">
                                <div class="card mb-4 box-shadow border-secondary" style="height:15rem">
                                    <h5 class="card-header" style="height:2.5rem">@dungeon.DungeonName</h5>
                                    <div class="card-body">
                                        <p class="card-text" style="height:7.5rem">@dungeon.DungeonDescription</p>
                                        <div class="row">
                                            <div class="col">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div class="btn-group">
                                                        <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="() => ViewDungeonButtonClicked(dungeon)">Anzeigen</button>
                                                        @if (dungeon.CurrentMaster is null)
                                                        {
                                                            <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="() => EditDungeonButtonClicked(dungeon)">Bearbeiten</button>
                                                        }
                                                        else
                                                        {
                                                            <button type="button" class="btn btn-sm btn-outline-secondary" disabled>
                                                                <TooltipComponent Text="Du kannst einen aktiven Dungeon nur als Master bearbeiten">Bearbeiten</TooltipComponent>
                                                            </button>
                                                        }
                                                    </div>
                                                    @*<small class="text-muted">@dungeon.LastActive</small>*@
                                                </div>
                                            </div>
                                            <div class="col">
                                                <button class="btn btn-sm btn-success float-end" @onclick="() => JoinDungeonButtonClicked(dungeon)">Beitreten</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    @foreach (DungeonDto dungeon in userDungeons)
                    {
                        @if (dungeon.Status == 1)
                        {
                            <div class="col-md-4">
                                <div class="card mb-4 box-shadow text-muted" style="height:15rem">
                                    <h5 class="card-header" style="height:2.5rem">@dungeon.DungeonName</h5>
                                    <div class="card-body">
                                        <p class="card-text" style="height:7.5rem">@dungeon.DungeonDescription</p>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="() => ViewDungeonButtonClicked(dungeon)">Anzeigen</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="() => EditDungeonButtonClicked(dungeon)">Bearbeiten</button>
                                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => DeleteDungeonButtonClicked(dungeon)">Löschen</button>
                                            </div>
                                            @*<small class="text-muted">@dungeon.LastActive</small>*@
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }

                    <div class="col-md-4">
                        <a class="card mb-4 box-shadow stretched-link" style="height:15rem" href="/dungeon/create">
                            <div class="card-header" style="min-height:2.5rem" />
                            <div class="card-body d-flex justify-content-center">
                                <svg height="8rem" viewBox="0 0 512 512" width="8rem" xmlns="http://www.w3.org/2000/svg" opacity="0.75">

                                    <path d="m368 272h-224c-8.832031 0-16-7.167969-16-16s7.167969-16 16-16h224c8.832031 0 16 7.167969 16 16s-7.167969 16-16 16zm0 0" />
                                    <path d="m256 384c-8.832031 0-16-7.167969-16-16v-224c0-8.832031 7.167969-16 16-16s16 7.167969 16 16v224c0 8.832031-7.167969 16-16 16zm0 0" />
                                </svg>
                            </div>
                        </a>
                    </div>

                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <Apollon.Mud.Client.Shared.Components.Account.LoginReminderComponent />
    </NotAuthorized>
</AuthorizeView>

@code {

    /// <summary>
    /// This list contains all dungeons belonging to the user
    /// </summary>
    private List<DungeonDto> userDungeons = new List<DungeonDto>();

    /// <summary>
    /// When initialized the Method requests all Dungeons belonging to user from the Server and saves them locally
    /// </summary>
    protected async override Task OnInitializedAsync()
    {
        //userDungeons = DungeonService.GetAllUserDungeons();

        var userDungeonCollection = await DungeonService.GetAllDungeonsForUser();
        if (!(userDungeonCollection is null))
        {
            userDungeons = userDungeonCollection.ToList();
        }
        StateHasChanged();
    }

    /// <summary>
    /// When the "view" Button of a Dungeon-Card is clicked, this Method opens the corresponding dungeon overview page
    /// </summary>
    /// <param name="dungeon"> The dungeon the user wants to view </param>
    private void ViewDungeonButtonClicked(DungeonDto dungeon)
    {
        NavManager.NavigateTo("/dungeon/overview/" + dungeon.Id);
    }

    /// <summary>
    /// When the "Edit" Button of a Dungeon-Card is clicked, this Method opens the corresponding dungeon configuration page
    /// </summary>
    /// <param name="dungeon"> The dungeon the user wants to configurate </param>
    private void EditDungeonButtonClicked(DungeonDto dungeon)
    {
        NavManager.NavigateTo("/dungeon/create/" + dungeon.Id);
    }


    /// <summary>
    /// When the "Delete" Button of a Dungeon-Card is clicked, this Method deletes the corresponding dungeon
    /// </summary>
    /// <param name="dungeon"> The dungeon the user wants to delete</param>
    private async void DeleteDungeonButtonClicked(DungeonDto dungeonToDelete)
    {
        if (!(dungeonToDelete is null))
        {
            if (!(dungeonToDelete.Id == Guid.Empty))
            {
                await DungeonService.DeleteDungeon(dungeonToDelete.Id);
                userDungeons.Remove(dungeonToDelete);
                StateHasChanged();
            }
        }
    }

    /// <summary>
    /// When the "Play" Button of a Dungeon is clicked, this Method opens the corresponding avatar selection page
    /// </summary>
    /// <param name="dungeon"> The dungeon the user wants to join </param>
    private void JoinDungeonButtonClicked(DungeonDto dungeon)
    {
        NavManager.NavigateTo("/dungeon/avatar/selection/" + dungeon.Id);
    }
}
