@page "/Identity/Account/ConfirmAccount/{id:guid}/{token}"
@inject Apollon.Mud.Client.Services.Interfaces.IAuthorizationService authorizationService
@using Apollon.Mud.Client.Data.Models


<div class="container d-flex justify-content-center">
    <div class="card mt-5" style="width:45rem">
        <div class="card-body text-center">
            <h1 class="display-2">E-Mail Bestätigen</h1>

            @if (successfullConfirmation is null)
            {
                <section>
                    <h4 class="ml-2">Wir arbeiten daran Deine E-Mail zu verifizieren</h4>
                    <h4 class="ml-2">Bitte gedulde Dich noch kurz</h4>
                    <hr />
                    <button class="btn btn-primary mt-2">Jetzt Anmelden</button>
                </section>
            }
            else if (successfullConfirmation == true)
            {
                <section>
                    <h4 class="ml-2">Deine E-Mail wurde erfolgreich bestätigt</h4>
                    <h4 class="ml-2">Viel Spaß in der Welt des Projekt Apollon!</h4>
                    <hr />
                    <button class="btn btn-primary mt-2">Jetzt Anmelden</button>
                </section>
            }
            else
            {
                <section>
                    <h4 class="ml-2">Deine E-Mail Adresse konnte leider nicht bestätigt werden</h4>
                    <h4 class="ml-2">Versuche über den Button einen neuen Link zu erhalten</h4>
                    <hr />

                    <EditForm EditContext="@resendEmailContext" OnSubmit="@HandleResendSubmit" novalidate>
                        <DataAnnotationsValidator />

                        <div class="form-group mt-2">
                            <label for="Input_Email">E-Mail</label>
                            <div class="d-flex justify-content-center">
                                <InputText class="form-control" style="width:25rem" type="email" placeholder="E-Mail" id="Email" @bind-Value="resendEmailModel.Email" />
                            </div>
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => resendEmailModel.Email) />
                        </div>
                        <div class="form-group mt-4">
                            <label for="Input_Password">E-Mail bestätigen</label>
                            <div class="d-flex justify-content-center">
                                <InputText class="form-control" style="width:25rem" placeholder="E-Mail bestätigen" id="Passwort" @bind-Value="resendEmailModel.EmailVerification" />
                            </div>
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => resendEmailModel.EmailVerification) />
                        </div>
                        <button class="btn btn-primary mt-5" type="submit">E-Mail erneut senden</button>
                    </EditForm>


                    <p></p>
                    <p class="mt-5"><strong class="text-muted">Sollte das Problem weiterhin bestehen, wende Dich bitte an den Support</strong></p>
                </section>
            }
        </div>
    </div>
</div>

@code {

    /// <summary>
    /// This GUID represents the request to validate a certain E-Mail and will be delivered in the link
    /// </summary>
    [Parameter]
    public Guid Id { get; set; }

    /// <summary>
    /// The unique confirm-token, taken from the called URL
    /// </summary>
    [Parameter]
    public string Token { get; set; }

    /// <summary>
    /// The nullable Bool to differentiate between: Confirmation pending / confirmation successfull / confirmation didnt succeed
    /// </summary>
    bool? successfullConfirmation = null;

    /// <summary>
    /// The Model to validate the "Resend confirmation E-Mail" Form
    /// </summary>
    private ForgotPasswordModel resendEmailModel = new ForgotPasswordModel();

    /// <summary>
    /// The Context for the "Resend confirmation E-Mail" Form
    /// </summary>
    private EditContext resendEmailContext;

    /// <summary>
    /// When initialized the component instantiates the EditContext
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        resendEmailContext = new EditContext(resendEmailModel);
        successfullConfirmation = await authorizationService.ConfirmRegistration(Id, Token);
    }

    /// <summary>
    /// This Method, called when the user wants to submit sending the confimartion E-Mail again, validates the form and reacts accordingly
    /// </summary>
    /// <returns>The Task that resends the Confirmation Email</returns>
    private async Task HandleResendSubmit()
    {
        var validCredentials = resendEmailContext.Validate();
        if (validCredentials)
        {
            //TODO Daten absenden
        }
        else
        {
            //TODO User Benachrichtigen
        }
    }
}

