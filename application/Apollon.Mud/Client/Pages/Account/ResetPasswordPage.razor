@page "/Identity/Account/ForgotPassword/{id:guid}/{token}"
@inject NavigationManager NavManager
@inject Apollon.Mud.Client.Services.Interfaces.IUserService UserService
@using Apollon.Mud.Client.Data.Models.Account

<div class="container d-flex justify-content-center">
    <div class="card mt-5" style="width:45rem">
        <div class="card-body text-center">
            <h1 class="display-2">Passwort zurücksetzen</h1>

            <section>
                <h4 class="ml-2">Bitte gib dein neues Passwort ein</h4>
                <hr />

                @if (resetSuccess)
                {
                    <label class="text-success mt-1"><strong>Passwort Erfolgreich zurückgesetzt</strong></label>
                }
                <EditForm EditContext="@resetPasswordContext" OnSubmit="@HandleResetSubmit" novalidate>
                    <DataAnnotationsValidator />

                    <div class="form-group mt-5">
                        <label for="Input_Email">Passwort</label>
                        <div class="d-flex justify-content-center">
                            <InputText class="form-control" style="width:25rem" type="password" placeholder="Neues Passwort"@bind-Value="resetPasswordModel.NewPassword" />
                        </div>
                    </div>
                    <div class="text-danger">
                        <ValidationMessage For=@(() => resetPasswordModel.NewPasswordConfirmation) />
                    </div>
                    <div class="form-group mt-4">
                        <label for="Input_Password">Passwort bestätigen</label>
                        <div class="d-flex justify-content-center">
                            <InputText class="form-control" style="width:25rem" type="password" placeholder="Passwort bestätigen"@bind-Value="resetPasswordModel.NewPasswordConfirmation" />
                        </div>
                    </div>
                    <div class="text-danger">
                        <ValidationMessage For=@(() => resetPasswordModel.NewPassword) />
                    </div>
                    <button class="btn btn-primary mt-5" type="submit">Bestätigen</button>
                </EditForm>
            </section>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Informs the user that the reset was successfull
    /// </summary>
    bool resetSuccess = false;

    /// <summary>
    /// This GUID represents the request to validate a certain E-Mail and will be delivered in the link
    /// </summary>
    [Parameter]
    public Guid Id { get; set; }

    /// <summary>
    /// Manages the tokens
    /// </summary>
    [Parameter]
    public string Token { get; set; }

    /// <summary>
    /// The Model to validate the "Forgot Password" Form
    /// </summary>
    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();

    /// <summary>
    /// The Context for the "Resend confirmation E-Mail" Form
    /// </summary>
    private EditContext resetPasswordContext;

    /// <summary>
    /// When the component is initialized this Method instantiates the EditContext
    /// </summary>
    protected override void OnInitialized()
    {
        resetPasswordContext = new EditContext(resetPasswordModel);
    }

    /// <summary>
    /// This Method, called when the user wants to submit sending the password-reset link, validates the form and reacts accordingly
    /// </summary>
    /// <returns>The Task that sends the password-reset Email</returns>
    private async Task HandleResetSubmit()
    {
        resetSuccess = false;
        var validCredentials = resetPasswordContext.Validate();
        if (validCredentials)
        {
            bool response = await UserService.ConfirmPasswordReset(resetPasswordModel.NewPassword, Token, Id);
            if (response)
            {
                resetSuccess = true;
                NavManager.NavigateTo("/Identity/Account/PasswordReset/Success");
            }
        }
    }
}
