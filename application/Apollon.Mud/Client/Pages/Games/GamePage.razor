@page "/dungeon/game"
@page "/dungeon/game/{DungeonId:guid}/{AvatarId:guid}"

@using Microsoft.AspNetCore.SignalR.Client
@using Apollon.Mud.Shared.Dungeon.Avatar
@using System.Net
@using Apollon.Mud.Client.Shared.Components

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Apollon.Mud.Client.Services.Interfaces.IGameService GameService
@inject Apollon.Mud.Client.Services.Interfaces.IDungeonService DungeonService
@inject Microsoft.Extensions.Configuration.IConfiguration Config
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized>
        @if (successfullConnection is null)
        {
            <ConnectingToServerComponent />
        }
        @*else if (successfullConnection == true)
        {*@
            <div class="container-fluid max-vh-100">
                <div class="row text-end" style="height: 6vh">
                    <div class="col" style="background:linear-gradient(90deg, rgba(33,37,41,0) 0%, rgba(255,255,255,1) 100%);" />
                    <div class="col-8 bg-white">
                        <div class="row">
                            <div class="col text-end">
                                <h5>Du möchtest mehr über MUDs erfahren?</h5>
                            </div>
                            <div class="col text-start">
                                <button class="btn btn-primary mt-2">Zum Wiki</button>
                            </div>
                            <div class="col text-end">
                                <h5>Du suchst Tipps und Tricks fürs Spielen?</h5>
                            </div>
                            <div class="col text-start">
                                <button class="btn btn-primary mt-2">Zur Hilfe</button>
                            </div>
                        </div>
                    </div>
                    <div class="col" style="background: linear-gradient(90deg, rgba(255,255,255,1), rgba(33,37,41,0));" />
                </div>
                <div class="play">
                    <div class="window">
                        <div class="row">
                            <div class="col-8" style="display: flex; flex-direction: column; height: 87vh; padding:0;">
                                <div id="terminal" class="terminal">
                                    <span> </span>
                                    <span>Wilkommen in den Weiten des Apollon</span>
                                    <span>   _____                .__  .__                           </span>
                                    <span>  /  _  \ ______   ____ |  | |  |   ____   ____            </span>
                                    <span> /  /_\  \\____ \ /  _ \|  | |  |  /  _ \ /    \           </span>
                                    <span>/    |    \  |_&gt; &gt;  &lt;_&gt; )  |_|  |_(  &lt;_&gt; )   |  \          </span>
                                    <span>\____|__  /   __/ \____/|____/____/\____/|___|  /          </span>
                                    <span>        \/|__|                                \/           </span>
                                    <span>________                                                   </span>
                                    <span>\______ \  __ __  ____    ____   ____  ____   ____   ______</span>
                                    <span> |    |  \|  |  \/    \  / ___\_/ __ \/  _ \ /    \ /  ___/</span>
                                    <span> |    `   \  |  /   |  \/ /_/  &gt;  ___(  &lt;_&gt; )   |  \\___ \ </span>
                                    <span>/_______  /____/|___|  /\___  / \___  &gt;____/|___|  /____  &gt;</span>
                                    <span>        \/           \//_____/      \/           \/     \/ </span>
                                    <span> </span>
                                    @foreach (var entry in TerminalMessages)
                                    {
                                        <span></span><br />
                                        <span>@entry</span><br />
                                    }
                                </div>
                                <div class="prompt d-flex">
                                    <input @bind="UserInput" @onkeyup="@CheckForEnter" id="prompt" type="text" class="form-control" autocorrect="off" autocapitalize="off" autocomplete="off" spellcheck="false" autofocus />
                                    <button type="submit" id="send" class="btn btn-primary" @onclick="ReadAndSendInput" disabled="@disableSendButton">Send</button>
                                </div>
                            </div>
                            <div class="col-4 bg-secondary" style="padding: 0;">
                                <ChatComponent @ref="ChatChildComponent" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        @*}
        else
        {
            <ServerConnectionFailedComponent />
        }*@

    </Authorized>
    <NotAuthorized>
        <Apollon.Mud.Client.Shared.Components.Account.LoginReminderComponent />
    </NotAuthorized>
</AuthorizeView>


@code {

    #region General Attributes
    /// <summary>
    /// This Queue stores all commands entered by the player that haven't been send yet
    /// </summary>
    private Queue<string> TerminalMessages = new Queue<string>();

    /// <summary>
    /// The string to bind the user input to
    /// </summary>
    public string UserInput { get; set; }

    /// <summary>
    /// Enables the page when the connection to the server was successfull
    /// </summary>
    bool? successfullConnection;

    /// <summary>
    /// TODO
    /// </summary>
    bool disableSendButton;

    #region Parameters

    /// <summary>
    /// The unique dungeon identifier
    /// </summary>
    [Parameter]
    public Guid DungeonId { get; set; }

    /// <summary>
    /// The unique avatar identifier
    /// </summary>
    [Parameter]
    public Guid AvatarId { get; set; }

    #endregion

    #endregion

    #region Hubs

    #region Chat Hub

    /// <summary>
    /// TODO
    /// </summary>
    public ChatComponent ChatChildComponent { get; set; }

    /// <summary>
    /// The Connection to the ChatHub
    /// </summary>
    public HubConnection ChatHubConnection { get; set; }

    #endregion

    #region Game Hub

    /// <summary>
    /// TODO
    /// </summary>
    public HubConnection GameHubConnection { get; set; }

    #endregion

    #endregion

    #region Methods

    /// <summary>
    /// On Initialization a hubConnection is set up and is configured to expect messages
    /// </summary>
    /// <returns> Nothing </returns>
    protected override async Task OnInitializedAsync()
    {
        //TODO Einkommentieren sobald möglich
        //ChatHubConnection = new HubConnectionBuilder()
        //    .WithUrl(Config["LoginConfiguration:BaseUri"] + ":" + Config["LoginConfiguration:Port"] + "/hubs/chat")
        //    .Build();

        //ChatHubConnection.On<string, string>("ReceiveMessage", ReceiveChatMessage);

        //GameHubConnection = new HubConnectionBuilder()
        //    .WithUrl(Config["LoginConfiguration:BaseUri"] + ":" + Config["LoginConfiguration:Port"] + "/hubs/game")
        //    .Build();

        //GameHubConnection.On<ICollection<AvatarDto>>("ReceiveChatPartnerList", UpdateChatPartnerList);
        //GameHubConnection.On("NotifyKicked", NotifyUserKicked);
        //GameHubConnection.On<bool>("NotfiyDungeonLeft", NotifyUserLeft);
        //GameHubConnection.On<string>("ReceiveGameMessage", ReceiveGameMessage);

        //await ChatHubConnection.StartAsync();
        //await GameHubConnection.StartAsync();

        //var enterRequest = await GameService.EnterDungeon(false, DungeonId, AvatarId, ChatHubConnection.ConnectionId, GameHubConnection.ConnectionId);

        //successfullConnection = enterRequest == HttpStatusCode.OK;
        successfullConnection = true;

        var dungeon = await DungeonService.GetDungeon(DungeonId);

        TerminalMessages.Enqueue("Epoche: \n" + dungeon.DungeonEpoch + "\n");
        TerminalMessages.Enqueue("Beschreibung: \n" + dungeon.DungeonDescription + "\n");
        TerminalMessages.Enqueue("Raumbeschreibung: \n" + dungeon.DefaultRoom.Description + "\n");
        await JSRuntime.InvokeVoidAsync("goToBottom", "terminal");
        StateHasChanged();
    }

    /// <summary>
    /// This Method enables the user to send commands by pressing enter
    /// </summary>
    /// <param name="e"></param>
    public void CheckForEnter(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && !disableSendButton)
        {
            ReadAndSendInput();
        }
    }

    /// <summary>
    /// TODO
    /// </summary>
    public async void ReadAndSendInput()
    {
        var response = await GameService.SendCommand(UserInput);

        if (response == HttpStatusCode.OK)
        {
            TerminalMessages.Enqueue(" > " + UserInput + "\n");
            UserInput = string.Empty;
        }

        await JSRuntime.InvokeVoidAsync("goToBottom", "terminal");
    }

    #region Hub Methods

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="message"></param>
    /// <returns></returns>
    public void ReceiveChatMessage(string sender, string message)
    {
        ChatChildComponent.ReceiveChatMessage(sender, message);
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="message"></param>
    /// <returns></returns>
    public async Task ReceiveGameMessage(string message)
    {
        TerminalMessages.Enqueue((message.Substring(1, message.Length - 3)) + "\n");
        StateHasChanged();
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="avatars"></param>
    /// <returns></returns>
    public void UpdateChatPartnerList(ICollection<AvatarDto> avatars)
    {
        ChatChildComponent.UpdateChatPartners(avatars);
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <returns></returns>
    public async Task NotifyUserKicked()
    {
        TerminalMessages.Enqueue("Du wurdest aus dem Spiel gekickt. " +
            "Somit kannst du diesen Dungeon nicht mehr bespielen. Bitte versuche in Zukunft Verhalten, das zu einem Kick führt, zu vermeiden.");
        disableSendButton = true;
        StateHasChanged();
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <returns></returns>
    public async Task NotifyUserLeft(bool success)
    {
        if (success)
        {
            TerminalMessages.Enqueue("Verbindung erfolgreich getrennt. Sie können den Dungeon jetzt verlassen");
            disableSendButton = true;
        }
        else TerminalMessages.Enqueue("Beim Trennen der Verbindung ist ein Fehler aufgetreten, bitte versuche es erneut");
        StateHasChanged();
    }

    #endregion
    #endregion
}