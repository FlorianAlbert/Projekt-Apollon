@page "/dungeon/game"
@page "/dungeon/game/{DungeonId:guid}/{AvatarId:guid}"

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Configuration
@using Apollon.Mud.Shared.HubContract

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Apollon.Mud.Client.Services.Interfaces.IGameService GameService
@inject IJSRuntime JSRuntime

@*@implements IClientChatHubContract
@implements IAsyncDisposable*@

@*<AuthorizeView>
    <Authorized>*@
<div class="container-fluid max-vh-100">
    <div class="row text-end" style="height: 6vh">
        <div class="col" style="background:linear-gradient(90deg, rgba(33,37,41,0) 0%, rgba(255,255,255,1) 100%);" />
        <div class="col-8 bg-white">
            <div class="row">
                <div class="col text-end">
                    <h5>Du möchtest mehr über MUDs erfahren?</h5>
                </div>
                <div class="col text-start">
                    <button class="btn btn-primary mt-2">Zum Wiki</button>
                </div>
                <div class="col text-end">
                    <h5>Du suchst Tipps und Tricks fürs Spielen?</h5>
                </div>
                <div class="col text-start">
                    <button class="btn btn-primary mt-2">Zur Hilfe</button>
                </div>
            </div>
        </div>
        <div class="col" style="background: linear-gradient(90deg, rgba(255,255,255,1), rgba(33,37,41,0));" />
    </div>
    <div class="play">
        <div class="window">
            <div class="row">
                <div class="col-8" style="display: flex; flex-direction: column; height: 87vh; padding:0;">
                    <div id="terminal" class="terminal">
                        <span> </span>
                        <span>Welcome to Apollon Dungeons</span>
                        <span>   _____                .__  .__                           </span>
                        <span>  /  _  \ ______   ____ |  | |  |   ____   ____            </span>
                        <span> /  /_\  \\____ \ /  _ \|  | |  |  /  _ \ /    \           </span>
                        <span>/    |    \  |_&gt; &gt;  &lt;_&gt; )  |_|  |_(  &lt;_&gt; )   |  \          </span>
                        <span>\____|__  /   __/ \____/|____/____/\____/|___|  /          </span>
                        <span>        \/|__|                                \/           </span>
                        <span>________                                                   </span>
                        <span>\______ \  __ __  ____    ____   ____  ____   ____   ______</span>
                        <span> |    |  \|  |  \/    \  / ___\_/ __ \/  _ \ /    \ /  ___/</span>
                        <span> |    `   \  |  /   |  \/ /_/  &gt;  ___(  &lt;_&gt; )   |  \\___ \ </span>
                        <span>/_______  /____/|___|  /\___  / \___  &gt;____/|___|  /____  &gt;</span>
                        <span>        \/           \//_____/      \/           \/     \/ </span>
                        <span> </span>
                        @foreach (var entry in entries)
                        {
                            <span> </span>
                            <span>@entry</span><br />
                            <span> </span><br />
                        }
                    </div>
                    <div class="prompt d-flex">
                        <input @bind="messageInput" @onkeyup="@CheckForEnter" id="prompt" type="text" class="form-control" autocorrect="off" autocapitalize="off" autocomplete="off" spellcheck="false" autofocus />
                        <button type="submit" id="send" class="btn btn-primary" @onclick="ReadAndSendInput" disabled="@(!isConnected)">Send</button>
                    </div>
                </div>
                <div class="col-4 bg-secondary" style="padding: 0;">
                    <ChatComponent @ref="ChatChildComponent" />
                </div>
            </div>
        </div>
    </div>
</div>
@*</Authorized>
        <NotAuthorized>
            <div class="alert alert-danger" role="alert">
                You need to be logged in to see this page.<a href="Identity/Account/Login" class="alert-link">Login</a>
            </div>
        </NotAuthorized>
    </AuthorizeView>*@


@code {

    #region General Attributes
    /// <summary>
    /// The unique dungeon identifier
    /// </summary>
    [Parameter]
    public Guid DungeonId { get; set; }

    /// <summary>
    /// The unique avatar identifier
    /// </summary>
    [Parameter]
    public Guid AvatarId { get; set; }

    /// <summary>
    /// This Queue stores all commands entered by the player that haven't been send yet
    /// </summary>
    private Queue<string> entries = new Queue<string>();

    /// <summary>
    /// The string to bind the user input to
    /// </summary>
    private string messageInput;

    /// <summary>
    /// The Bool to (de)active the send button depending on a working connection to the server
    /// </summary>
    bool isConnected = true;
    #endregion

    #region Hubs

    /// <summary>
    /// TODO
    /// </summary>
    public IConfiguration Configuration { get; }

    #region Chat Hub

    /// <summary>
    /// TODO
    /// </summary>
    public ChatComponent ChatChildComponent { get; set; }

    /// <summary>
    /// The Connection to the ChatHub
    /// </summary>
    public HubConnection ChatHubConnection { get; set; }

    #endregion

    #region Game Hub

    /// <summary>
    /// TODO
    /// </summary>
    public HubConnection GameHubConnection { get; set; }

    #endregion

    #endregion

    /// <summary>
    /// On Initialization a hubConnection is set up and is configured to expect messages
    /// </summary>
    /// <returns> Nothing </returns>
    protected override async Task OnInitializedAsync()
    {
        ChatHubConnection = new HubConnectionBuilder()
            .WithUrl(Configuration.GetSection("LoginConfiguration").GetSection("BaseUri").Value + "/hubs/chat")
            .Build();

        ChatHubConnection.On<string, string>("ReceiveMessage", ReceiveChatMessage);

        GameHubConnection = new HubConnectionBuilder()
            .WithUrl(Configuration.GetSection("LoginConfiguration").GetSection("BaseUri").Value + "hubs/game")
            .Build();

        await ChatHubConnection.StartAsync();
        await GameHubConnection.StartAsync();

        var enterRequest = GameService.EnterDungeon(false, DungeonId, AvatarId, ChatHubConnection.ConnectionId, GameHubConnection.ConnectionId);
        //GameHubConnection aufbauen
        //HubConnection.StartAsync()
        //Connections dann zusammenbringen
        //Dann an GameController Join request senden, beide IDs, Avatar und DungeonId mitschicken
    }

    /// <summary>
    /// This Method enables the user to send commands by pressing enter
    /// </summary>
    /// <param name="e"></param>
    public void CheckForEnter(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            ReadAndSendInput();
        }
    }

    /// <summary>
    /// TODO
    /// </summary>
    public void ReadAndSendInput()
    {
        throw new NotImplementedException();
    }

    public async Task ReceiveChatMessage(string sender, string message)
    {
        var encodedSender = $"{sender}";
        var encodedMessage = $"{message}";
        await ChatChildComponent.ReceiveChatMessage(encodedSender, encodedMessage);
    }

}