@page "/dungeon/avatar/selection/{DungeonId:guid}"

@using Apollon.Mud.Shared.Dungeon.Avatar
@using Apollon.Mud.Shared.Dungeon
@inject NavigationManager NavManager
@inject Apollon.Mud.Client.Data.Account.UserContext UserContext
@inject Apollon.Mud.Client.Services.Interfaces.IAvatarService AvatarService
@inject Apollon.Mud.Client.Services.Interfaces.IDungeonService DungeonService

<div style="height:93vh">
    <div class="container d-flex justify-content-center">
        <div class="card mt-5" style="width:30rem">
            <div class="card-header">
                <div class="row">
                    <div class="col-5">
                        <h5>Avatar Auswahl</h5>
                    </div>
                    <div class="col">
                        @if (UserIsDungeonMaster)
                        {
                            <button class="btn btn-danger btn-sm" @onclick="MasterViewButtonClicked" role="button">Masteransicht</button>
                        }
                    </div>
                    <div class="col">
                        <button class="btn btn-sm btn-primary" @onclick="AvatarCreationButtonClicked">Neuer Avatar</button>
                    </div>
                </div>
            </div>
            <div class="card-body text-center" style="display: flex; flex-direction: column; height: 70vh">
                <div class="list-group" style="overflow-y:auto; height:100%">
                    @if (userAvatars.Count == 0)
                    {
                        <h2 class="text-muted">Du musst erst einen Avatar erstellen.</h2>
                    }

                    @foreach (AvatarDto avatar in userAvatars)
                    {
                        <li type="button" class="list-group-item list-group-item-action text-lg-start">
                            <div class="row">
                                <div class="col">
                                    <h5>Avatarname: @avatar.Name</h5>
                                </div>
                                <div class="col-2 d-flex flex-column">
                                    <button class="btn btn-default btn-xs mt-auto d-flex">
                                        <svg height="20px" width="20px" viewBox="-40 0 427 427.00131" xmlns="http://www.w3.org/2000/svg">
                                            <path d="m232.398438 154.703125c-5.523438 0-10 4.476563-10 10v189c0 5.519531 4.476562 10 10 10 5.523437 0 10-4.480469 10-10v-189c0-5.523437-4.476563-10-10-10zm0 0" />
                                            <path d="m114.398438 154.703125c-5.523438 0-10 4.476563-10 10v189c0 5.519531 4.476562 10 10 10 5.523437 0 10-4.480469 10-10v-189c0-5.523437-4.476563-10-10-10zm0 0" />
                                            <path d="m28.398438 127.121094v246.378906c0 14.5625 5.339843 28.238281 14.667968 38.050781 9.285156 9.839844 22.207032 15.425781 35.730469 15.449219h189.203125c13.527344-.023438 26.449219-5.609375 35.730469-15.449219 9.328125-9.8125 14.667969-23.488281 14.667969-38.050781v-246.378906c18.542968-4.921875 30.558593-22.835938 28.078124-41.863282-2.484374-19.023437-18.691406-33.253906-37.878906-33.257812h-51.199218v-12.5c.058593-10.511719-4.097657-20.605469-11.539063-28.03125-7.441406-7.421875-17.550781-11.5546875-28.0625-11.46875h-88.796875c-10.511719-.0859375-20.621094 4.046875-28.0625 11.46875-7.441406 7.425781-11.597656 17.519531-11.539062 28.03125v12.5h-51.199219c-19.1875.003906-35.394531 14.234375-37.878907 33.257812-2.480468 19.027344 9.535157 36.941407 28.078126 41.863282zm239.601562 279.878906h-189.203125c-17.097656 0-30.398437-14.6875-30.398437-33.5v-245.5h250v245.5c0 18.8125-13.300782 33.5-30.398438 33.5zm-158.601562-367.5c-.066407-5.207031 1.980468-10.21875 5.675781-13.894531 3.691406-3.675781 8.714843-5.695313 13.925781-5.605469h88.796875c5.210937-.089844 10.234375 1.929688 13.925781 5.605469 3.695313 3.671875 5.742188 8.6875 5.675782 13.894531v12.5h-128zm-71.199219 32.5h270.398437c9.941406 0 18 8.058594 18 18s-8.058594 18-18 18h-270.398437c-9.941407 0-18-8.058594-18-18s8.058593-18 18-18zm0 0" />
                                            <path d="m173.398438 154.703125c-5.523438 0-10 4.476563-10 10v189c0 5.519531 4.476562 10 10 10 5.523437 0 10-4.480469 10-10v-189c0-5.523437-4.476563-10-10-10zm0 0" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <h6>Geschlecht:@((Gender)avatar.Gender)</h6>
                                    <h6>Klasse: @avatar.Class.Name</h6>
                                    <h6>Rasse: @avatar.Race.Name</h6>
                                </div>
                                <div class="col-3 d-flex flex-column">
                                    <button class="btn btn-success btn-sm mt-auto" @onclick="() => JoinDungeonButtonClicked(avatar)">Beitreten</button>
                                </div>
                            </div>
                        </li>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// This list contains all Avatars of the user
    /// </summary>
    private List<AvatarDto> userAvatars = new List<AvatarDto>();

    /// <summary>
    /// The selected Dungeons ID
    /// </summary>
    [Parameter]
    public Guid DungeonId { get; set; }

    /// <summary>
    /// The open Dungeon
    /// </summary>
    public DungeonDto Dungeon { get; set; }

    /// <summary>
    /// Shows or hides the "Go to Master View" Button
    /// </summary>
    public bool UserIsDungeonMaster { get; set; }


    /// <summary>
    /// When initialized the Method requests all Avatars belonging to user on this dungeon and saves them locally
    /// </summary>
    protected async override void OnInitialized()
    {
        var avatars = await AvatarService.GetAllAvatarsForUser(DungeonId);
        if (avatars is not null) userAvatars = avatars.ToList();

        var dungeon = await DungeonService.GetDungeon(DungeonId);
        if (dungeon is not null) Dungeon = dungeon;

        if (Dungeon.DungeonMasters is not null)
        {
            UserIsDungeonMaster = Dungeon.DungeonMasters.Contains(UserContext.DungeonUserContext);
        }


        StateHasChanged();
    }

    /// <summary>
    /// This function navigates the User to the avatar selection Page
    /// </summary>
    public void AvatarCreationButtonClicked()
    {
        NavManager.NavigateTo("/dungeon/avatar/creation/" + DungeonId);
    }

    /// <summary>
    /// This function navigates the User to the MasterView Page
    /// </summary>
    public void MasterViewButtonClicked()
    {
        NavManager.NavigateTo("/dungeon/master/requests/" + DungeonId);
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="avatar"></param>
    public void JoinDungeonButtonClicked(AvatarDto avatar)
    {
        NavManager.NavigateTo("/dungeon/game/" + DungeonId + "/" + avatar.Id);
    }

    /// <summary>
    /// This function deletes the avatar of a user
    /// </summary>
    /// <param name="avatarToDelete"></param>
    private async void RemoveAvatarButtonClicked(AvatarDto avatarToDelete)
    {
        if (avatarToDelete is not null)
        {
            if (!(avatarToDelete.Id == Guid.Empty))
            {
                await AvatarService.DeleteAvatar(DungeonId, avatarToDelete.Id);
                userAvatars.Remove(avatarToDelete);
                StateHasChanged();
            }
        }
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="avatar"></param>
    private async void DeleteAvatar(AvatarDto avatar)
    {
        var success = await AvatarService.DeleteAvatar(DungeonId, avatar.Id);
        if (success) userAvatars.Remove(avatar);
        StateHasChanged();
    }
}
