@page "/dungeons"

@using Apollon.Mud.Shared.Dungeon

@inject NavigationManager NavManager
@inject Apollon.Mud.Client.Services.Interfaces.IDungeonService DungeonService
@inject Apollon.Mud.Client.Data.Account.UserContext UserContext

<AuthorizeView>
    <Authorized>
        <div class="container shadow d-flex bg-white min-vh-100">
            <div class="row container-fluid">
                <div class="col-md-auto mt-3">
                    <h2>Filter</h2>
                    <div class="card shadow-sm" style="width: 18rem;">
                        <div class="card-body">
                            <form>
                                <div class="form-group">
                                    <label for="SearchName">Name</label>
                                    <input class="form-control" placeholder="Suche nach einem Namen" @bind-value="FilterForName" @bind-value:event="oninput">
                                </div>
                                <div class="form-group mt-3">
                                    <label for="SearchName">Beschreibung</label>
                                    <input class="form-control" placeholder="Suche nach einer Beschreibung" @bind-value="FilterForDescription" @bind-value:event="oninput">
                                </div>
                                <div class="form-group mt-3">
                                    <label for="SearchName">Epoch</label>
                                    <input class="form-control" placeholder="Suche nach einer Epoche" @bind-value="FilterForEpoch" @bind-value:event="oninput">
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="col-lg-9 mt-3">
                    <div class="container ">
                        <h1>Games</h1>
                        @if (allDungeons.Count == 0)
                        {
                            <h2 class="text-muted">Momentan gibt es keine aktiven Dungeons</h2>
                        }
                        @foreach (DungeonDto dungeon in allDungeons)
                        {
                            @if (dungeon.Status == 0 &&
                               dungeon.DungeonName.Contains(FilterForName) &&
                               dungeon.DungeonDescription.Contains(FilterForDescription) &&
                               dungeon.DungeonEpoch.Contains(FilterForEpoch))
                            {
                                <div class="card mt-2 shadow">
                                    <h5 class="card-header">@dungeon.DungeonName</h5>
                                    <div class="card-body">
                                        <div class="row">
                                            <p class="card-text">Beschreibung: @dungeon.DungeonDescription</p>
                                        </div>
                                        <div class="row">
                                            <p class="card-text">Epoche: @dungeon.DungeonEpoch</p>
                                        </div>
                                        @if (dungeon.BlackList is not null && dungeon.BlackList.Any(u => u.Id == UserContext.DungeonUserContext.Id))
                                        {
                                            <button class="btn btn-danger float-end" disabled>Gesperrt</button>
                                        }
                                        else if (dungeon.Visibility == 1 || (dungeon.WhiteList is not null && dungeon.WhiteList.Any(u => u.Id == UserContext.DungeonUserContext.Id)))
                                        {
                                            <button class="btn btn-success float-end" @onclick="() => JoinDungeonButtonClicked(dungeon)">Beitreten</button>
                                        }
                                        else if (dungeon.OpenRequests is not null && dungeon.OpenRequests.Contains(UserContext.DungeonUserContext))
                                        {
                                            <button class="btn btn-outline-success float-end" disabled>Ausstehend</button>
                                        }
                                        else if (dungeon.Visibility == 0)
                                        {
                                            <button class="btn btn-primary float-end" @onclick="() => SendDungeonEnterRequest(dungeon)">Anfrage stellen</button>
                                        }
                                    </div>
                                    <div class="card-footer">Erstellt von @dungeon.DungeonOwner.Email.Split("@")[0]</div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <Apollon.Mud.Client.Shared.Components.Account.LoginReminderComponent />
    </NotAuthorized>
</AuthorizeView>

@code {

    /// <summary>
    /// The Name that is being searched for
    /// </summary>
    public string FilterForName { get; set; } = string.Empty;

    /// <summary>
    /// The Description that is being searched for
    /// </summary>
    public string FilterForDescription { get; set; } = string.Empty;

    /// <summary>
    /// The Epoch that is being searched for
    /// </summary>
    public string FilterForEpoch { get; set; } = string.Empty;

    /// <summary>
    /// This list contains all dungeons
    /// </summary>
    private List<DungeonDto> allDungeons = new List<DungeonDto>();

    /// <summary>
    /// When initialized the Method requests all Dungeons belonging to user from the Server and saves them locally
    /// </summary>
    protected async override Task OnInitializedAsync()
    {

        var response = await DungeonService.GetAllDungeons();
        if (!(response is null)) allDungeons = response.ToList();

        StateHasChanged();

    }

    /// <summary>
    /// When the "Play" Button of a Dungeon is clicked, this Method opens the corresponding avatar selection page
    /// </summary>
    /// <param name="dungeon"> The dungeon the user wants to join </param>
    private async void JoinDungeonButtonClicked(DungeonDto dungeon)
    {
        if (dungeon.WhiteList.All(u => u.Id != UserContext.DungeonUserContext.Id))
        {
            var success = await DungeonService.OpenEnterRequest(dungeon.Id);
            if (success) NavManager.NavigateTo("/dungeon/avatar/selection/" + dungeon.Id);
        }
        else NavManager.NavigateTo("/dungeon/avatar/selection/" + dungeon.Id);

    }

    /// <summary>
    /// Sends a request to join this Dungeon
    /// </summary>
    private void SendDungeonEnterRequest(DungeonDto dungeon)
    {
        NavManager.NavigateTo("/dungeon/avatar/request/" + dungeon.Id);
    }

    private EventCallback SearchStringChanged()
    {
        StateHasChanged();
        return EventCallback.Empty;
    }
}