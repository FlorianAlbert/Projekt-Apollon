@page "/admin/dungeons"

@layout AdminLayout

@using Apollon.Mud.Shared.Dungeon
@using Apollon.Mud.Client.Data.Account
@using System.Net

@inject Apollon.Mud.Client.Services.Interfaces.IDungeonService DungeonService
@inject Apollon.Mud.Client.Services.Interfaces.IGameService GameService
@inject Apollon.Mud.Client.Data.Account.UserContext UserContext

<AuthorizeView>
    <Authorized>
        @if (UserContext.DungeonUserContext.IsAdmin)
        {
            <div class="container ">
                <h1>Liste aller Dungeons</h1>
                @if (allDungeons.Count == 0)
                {
                    <h2 class="text-muted">Momentan gibt es keine Dungeons</h2>
                }
                @foreach (DungeonDto dungeon in allDungeons)
                {
                    <div class="card mt-2 shadow">
                        <div class="card-header">
                            <div class="row">
                                <div class="col-3">
                                    <h4>@dungeon.DungeonName</h4>
                                </div>
                                <div class="col">
                                    <div class="row">
                                        <div class="col-2 float-end">
                                            <h5>Status: </h5>
                                        </div>
                                        <div class="col-1 float-start">
                                            @if (dungeon.Status == 0)
                                            {
                                                <div class="spinner-grow text-success" role="status" style="width: 1rem; height: 1rem"></div>
                                            }
                                            else
                                            {
                                                <div class="spinner-grow text-danger" role="status" style="width: 1rem; height: 1rem"></div>
                                            }
                                        </div>
                                        <div class="col-3 justify-content-end">
                                            <h5>Zuletzt aktiv: </h5>
                                        </div>
                                        <div class="col float-start">
                                            <div> <strong>@dungeon.LastActive</strong></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-1">
                                    <button class="btn btn-sm btn-danger float-end" @onclick="() => DeleteDungeonButtonClicked(dungeon)">X</button>
                                </div>
                            </div>
                        </div>

                        <div class="card-body">
                            <div class="row">
                                <div class="col">
                                    <p class="card-text">@dungeon.DungeonDescription</p>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer">Erstellt von @dungeon.DungeonOwner.Email.Split("@")[0]</div>
                    </div>
                }
            </div>
        }
        else
        {
            <h3>Diese Seite ist nur für Admins zugänglich!</h3>
        }
    </Authorized>
    <NotAuthorized>
        <Apollon.Mud.Client.Shared.Components.Account.LoginReminderComponent />
    </NotAuthorized>
</AuthorizeView>

@code {
    /// <summary>
    /// This list contains all dungeons belonging to the user
    /// </summary>
    private List<DungeonDto> allDungeons = new List<DungeonDto>();


    /// <summary>
    /// When initialized the Method requests all Dungeons belonging to user from the Server and saves them locally
    /// </summary>
    protected async override Task OnInitializedAsync()
    {
        var response = await DungeonService.GetAllDungeons();
        if (!(response is null)) allDungeons = response.ToList();
        StateHasChanged();
    }

    /// <summary>
    /// When the "Delete" Button of a Dungeon-Card is clicked, this Method deletes the corresponding dungeon
    /// </summary>
    /// <param name="dungeonToDelete"> The dungeon the user wants to delete</param>
    private async void DeleteDungeonButtonClicked(DungeonDto dungeonToDelete)
    {
        if (!(dungeonToDelete is null))
        {
            var successfullKicked = await GameService.KickAll(dungeonToDelete.Id);
            if (successfullKicked == HttpStatusCode.OK)
            {
                dungeonToDelete.Status = 1;
                var successfullStatusUpdate = await DungeonService.UpdateDungeon(dungeonToDelete);
                if (successfullStatusUpdate is null)
                {
                    var successfullDelete = await DungeonService.DeleteDungeon(dungeonToDelete.Id);
                    if (successfullDelete)
                    {
                        allDungeons.Remove(dungeonToDelete);
                        StateHasChanged();
                    }
                }
            }
        }
    }
}
