@using Apollon.Mud.Shared.Dungeon
@using Apollon.Mud.Shared.Dungeon.Avatar
@using Apollon.Mud.Shared.Dungeon.User
@using System.Net

@inject Apollon.Mud.Client.Services.Interfaces.IDungeonService DungeonService
@inject Apollon.Mud.Client.Services.Interfaces.IRoomService RoomService
@inject Apollon.Mud.Client.Services.Interfaces.IAvatarService AvatarService
@inject Apollon.Mud.Client.Services.Interfaces.IGameService GameService

<div class="row bg-white">
    @if (Dungeon is not null)
    {
        <div class="col-4">
            <div class="card" style="display: flex; flex-direction: column; height: 87vh">
                <div class="card-header text-center">
                    <div class="btn-group">
                        @if (showMasters)
                        {
                            <button class="btn btn-outline-info" @onclick="() => ChangeListContent(false)">Spieler</button>
                            <button class="btn btn-outline-info active">Master</button>
                        }
                        else
                        {
                            <button class="btn btn-outline-info active">Spieler</button>
                            <button class="btn btn-outline-info" @onclick=" () => ChangeListContent(true)">Master</button>
                        }
                    </div>
                </div>
                <div class="list-group border-dark" style="overflow-y:auto; height:100%">



                    @if (showMasters)
                    {
                        @foreach (DungeonUserDto user in Dungeon.DungeonMasters)
                        {
                            <button type="button" class="list-group-item list-group-item-action" @onclick="(() => ChangeUser(user))">
                                <h5>Spieler: @user.Email.Split("@")[0]</h5>
                            </button>
                        }
                    }
                    else
                    {
                        @foreach (DungeonUserDto user in Dungeon.WhiteList)
                        {
                            @if (!Dungeon.DungeonMasters.Contains(user))
                            {
                                <button type="button" class="list-group-item list-group-item-action" @onclick="(() => ChangeUser(user))">
                                    <h5>Spieler: @user.Email.Split("@")[0]</h5>
                                </button>
                            }
                        }
                        @foreach (DungeonUserDto user in Dungeon.BlackList)
                        {
                            <div class="list-group-item list-group-item-action bg-secondary">
                                <div class="row">
                                    <div class="col">
                                        <h5>Spieler: @user.Email.Split("@")[0]</h5>
                                    </div>
                                    <div class="col">
                                        <div class="btn btn-danger float-end" @onclick="() => UnbanUser(user)">Entbannen</div>
                                    </div>
                                </div>
                            </div>
                        }
                    }

                </div>
            </div>
        </div>
        <div class="col-8">
            <div style="display: flex; flex-direction: column; height: 87vh">

                @if (Dungeon.WhiteList.Where(x => Dungeon.DungeonMasters.Contains(x)).Count() == 0)
                {
                    <h5 class="text-muted">Dem Dungeon sind noch keine Spieler beigetreten</h5>
                }
                else if (OpenUser is not null)
                {
                    <div class="card mt-5">
                        <div class="card-header">
                            <div class="row">
                                <div class="col">
                                    <h3>Name: @OpenUser.Email.Split("@")[0]</h3>
                                </div>
                                @if (showMasters)
                                {
                                    @if (OpenUser.Id != Dungeon.DungeonOwner.Id)
                                    {
                                        <div class="col">
                                            <button class="btn btn-warning btn-sm float-end me-3" type="button" @onclick="RemoveDungeonMaster">Master entfernen</button>
                                        </div>
                                        <div class="col">
                                            <button class="btn btn-primary btn-sm float-end me-3" type="button" @onclick="KickUser">Kicken</button>
                                        </div>
                                        <div class="col">
                                            <button class="btn btn-danger btn-sm float-end" type="button" @onclick="BanUser">Verbannen</button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col">
                                            <button class="btn btn-warning btn-sm float-end me-3" type="button" disabled>Master entfernen</button>
                                        </div>
                                        <div class="col">
                                            <button class="btn btn-primary btn-sm float-end me-3" type="button" disabled>Kicken</button>
                                        </div>
                                        <div class="col">
                                            <button class="btn btn-danger btn-sm float-end" type="button" disabled>Verbannen</button>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="col">
                                        <button class="btn btn-warning btn-sm float-end me-3" type="button" @onclick="AddDungeonMaster">Master ernennen</button>
                                    </div>
                                    <div class="col">
                                        <button class="btn btn-primary btn-sm float-end me-3" type="button" @onclick="KickUser">Kicken</button>
                                    </div>
                                    <div class="col">
                                        <button class="btn btn-danger btn-sm float-end" type="button" @onclick="BanUser">Verbannen</button>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="card-body">
                            <table class="table text-center">
                                <thead>
                                    <tr>
                                        <th scope="col"></th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Klasse</th>
                                        <th scope="col">Rasse</th>
                                        <th scope="col">Raum</th>
                                        <th scope="col">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{int avatarIndex = 1;}
                                    @if (UserAvatarDictionary.ContainsKey(OpenUser.Id))
                                    {
                                        @foreach (AvatarDto avatar in UserAvatarDictionary[OpenUser.Id])
                                        {
                                            <tr>
                                                <th scope="row">@avatarIndex</th>
                                                <td>@avatar.Name</td>
                                                <td>@avatar.Class.Name</td>
                                                <td>@avatar.Race.Name</td>
                                                <td>@avatar.CurrentRoom.Name</td>
                                                @if (avatar.Status == 0)
                                                {
                                                    <td><div class="spinner-grow text-success" role="status" style="width: 1rem; height: 1rem"></div></td>
                                                }
                                                else
                                                {
                                                    <td><div class="spinner-grow text-danger" role="status" style="width: 1rem; height: 1rem"></div></td>
                                                }
                                            </tr>
                                            avatarIndex++;
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
                else
                {
                    <h5 class="text-muted">Wähle einen Spieler aus!</h5>
                }

            </div>
        </div>
    }
</div>

@code {

    /// <summary>
    /// The Avatars created in this dungeon
    /// </summary>
    //public List<AvatarDto> DungeonAvatars { get; set; } = new List<AvatarDto>();

    /// <summary>
    /// The List of Players that joined this Dungeon, active and inactive
    /// </summary>
    //public List<Guid> AllPlayersList { get; set; } = new List<Guid>();

    /// <summary>
    /// The ID of the Dungeon this Master is handling
    /// </summary>
    [Parameter]
    public Guid DungeonId { get; set; }

    /// <summary>
    /// The Dungeon this Master is handling
    /// </summary>
    public DungeonDto Dungeon { get; set; }

    /// <summary>
    /// A Dictionary getting every Avatar of each user
    /// </summary>
    public Dictionary<Guid, ICollection<AvatarDto>> UserAvatarDictionary { get; set; } = new Dictionary<Guid, ICollection<AvatarDto>>();

    /// <summary>
    /// The user that is currently opened
    /// </summary>
    public DungeonUserDto OpenUser { get; set; }

    /// <summary>
    /// Differentiates wether the component lists dungeon Masters or normal players
    /// </summary>
    bool showMasters;

    /// <summary>
    /// Loads the corresponding dungeon and saves it locally, fills all lists
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        var dungeon = await DungeonService.GetDungeon(DungeonId);
        if (dungeon is not null)
        {
            Dungeon = dungeon;
            var dungeonAvatars = await AvatarService.GetAllAvatars(DungeonId);
            foreach (DungeonUserDto user in dungeon.WhiteList)
            {
                if (UserAvatarDictionary.ContainsKey(user.Id)) UserAvatarDictionary[user.Id] = dungeonAvatars.Where(x => x.Owner.Id == user.Id).ToList();

                else UserAvatarDictionary.Add(user.Id, dungeonAvatars.Where(x => x.Owner.Id == user.Id).ToList());
            }
        }
        StateHasChanged();
    }

    /// <summary>
    /// Updates the Avatar that are currently in the game 
    /// </summary>
    /// <param name="avatarList">The List of active avatars</param>
    /// <returns></returns>
    public async Task UpdateAvatars(ICollection<AvatarDto> avatarList)
    {
        foreach (ICollection<AvatarDto> avatarCollection in UserAvatarDictionary.Values)
        {
            foreach (AvatarDto avatar in avatarCollection)
            {
                if (!avatarList.Any(x => x.Id == avatar.Id)) avatar.Status = 1;
            }
        }
        foreach (AvatarDto avatar in avatarList)
        {
            if (UserAvatarDictionary.ContainsKey(avatar.Owner.Id))
            {
                if (UserAvatarDictionary[avatar.Owner.Id].Any(x => x.Id == avatar.Id))
                {
                    var oldAvatar = UserAvatarDictionary[avatar.Owner.Id].FirstOrDefault(x => x.Id == avatar.Id);
                    UserAvatarDictionary[avatar.Owner.Id].Remove(oldAvatar);
                }
                UserAvatarDictionary[avatar.Owner.Id].Add(avatar);
            }
            else
            {
                UserAvatarDictionary.Add(avatar.Owner.Id, new List<AvatarDto>());
                UserAvatarDictionary[avatar.Owner.Id].Add(avatar);
            }
        }
        StateHasChanged();
    }

    /// <summary>
    /// Called when the Master opens another user card
    /// </summary>
    /// <param name="user"></param>
    private async void ChangeUser(DungeonUserDto user)
    {
        OpenUser = user;
        StateHasChanged();
    }

    /// <summary>
    /// Removes the chosen user from the Dungeons Whitelist
    /// </summary>
    private async void KickUser()
    {
        if (Dungeon.DungeonMasters.Contains(OpenUser)) Dungeon.DungeonMasters.Remove(OpenUser);
        var activeAvatars = UserAvatarDictionary[OpenUser.Id].Where(x => x.Status == 0);
        foreach(AvatarDto avatar in activeAvatars)
        {
            await GameService.KickAvatar(avatar.Id);
        }
        Dungeon.WhiteList.Remove(OpenUser);
        UserAvatarDictionary.Remove(OpenUser.Id);
        DungeonService.UpdateDungeon(Dungeon);
        OpenUser = null;
        StateHasChanged();
    }

    /// <summary>
    /// Sets the chosen user to the Dungeons Blacklist
    /// </summary>
    private async void BanUser()
    {
        if (Dungeon.DungeonMasters.Contains(OpenUser)) Dungeon.DungeonMasters.Remove(OpenUser);
        Dungeon.WhiteList.Remove(OpenUser);
        Dungeon.BlackList.Add(OpenUser);
        UserAvatarDictionary.Remove(OpenUser.Id);
        DungeonService.UpdateDungeon(Dungeon);
        StateHasChanged();
    }

    /// <summary>
    /// Called when a Dungeon Master takes the DM Role of another Master
    /// </summary>
    private async void RemoveDungeonMaster()
    {
        if (Dungeon.DungeonMasters.Contains(OpenUser)) Dungeon.DungeonMasters.Remove(OpenUser);
        DungeonService.UpdateDungeon(Dungeon);
        StateHasChanged();
    }

    /// <summary>
    /// Called when a Dungeon Master gives the DM Role to a player
    /// </summary>
    private async void AddDungeonMaster()
    {
        if (!Dungeon.DungeonMasters.Contains(OpenUser)) Dungeon.DungeonMasters.Add(OpenUser);
        DungeonService.UpdateDungeon(Dungeon);
        StateHasChanged();
    }

    /// <summary>
    /// Changes the shown List of Players / Masters
    /// </summary>
    /// <param name="masterOrPlayer">true for master, false for players</param>
    private void ChangeListContent(bool masterOrPlayer)
    {
        showMasters = masterOrPlayer;
        OpenUser = null;
        StateHasChanged();
    }

    /// <summary>
    /// Removes a user from the Blacklist of the Dungeon
    /// </summary>
    /// <param name="user">The User to unban</param>
    private void UnbanUser(DungeonUserDto user)
    {
        Dungeon.BlackList.Remove(user);
        DungeonService.UpdateDungeon(Dungeon);
        StateHasChanged();
    }
}
