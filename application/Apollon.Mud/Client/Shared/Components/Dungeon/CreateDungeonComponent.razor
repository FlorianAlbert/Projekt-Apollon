@using Apollon.Mud.Client.Data.Models.Dungeon
@using Apollon.Mud.Shared.Dungeon
@using Apollon.Mud.Shared.Dungeon.Room
@inject Apollon.Mud.Client.Services.Interfaces.IDungeonService DungeonService
@inject Apollon.Mud.Client.Services.Interfaces.IRoomService RoomService
@inject Apollon.Mud.Client.Data.Account.UserContext userContext

<div class="card">
    <div class="card-header">
        <h2>Allgemeines</h2>
    </div>
    <div class="card-body">

        @if (DungeonNameAlreadyExists)
        {
            <label class="text-danger mt-1"><strong>Ein Dungeon mit diesem Namen existiert bereits, bitte wähle einen Anderen</strong></label>
        }

        <EditForm EditContext="@dungeonContext" OnSubmit="@HandleDungeonSubmit" novalidate>
            <DataAnnotationsValidator />

            <div class="form-group mt-2">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Name</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <InputText class="form-control" placeholder="Name" id="Name" @bind-Value="dungeonModel.Name" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonModel.Name) />
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Beschreibung</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <InputTextArea class="form-control" placeholder="Beschreibung" @bind-Value="dungeonModel.Description" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonModel.Description) />
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Epoche</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <InputTextArea class="form-control" placeholder="Text" @bind-Value="dungeonModel.Epoch" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonModel.Epoch) />
                        </div>
                    </div>
                </div>
            </div>

            @if (DungeonHasRooms)
            {
                <div class="form-group mt-5">
                    <div class="row">
                        <div class="col-3">
                            <h5 class="mt-1">Startraum</h5>
                        </div>
                        <div class="col">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="dungeonModel.DefaultRoom">
                                    @foreach (RoomDto room in dungeonRooms)
                                    {
                                        @if (room.Status == 0)
                                        {
                                            <option value="@room.Name">@room.Name</option>

                                        }
                                    }
                                </select>
                            </div>
                            <div class="text-danger">
                                <ValidationMessage For=@(() => dungeonModel.DefaultRoom) />
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Sichtbarkeit</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <select class="form-select" @bind="dungeonModel.Visibility">
                                <option selected hidden value=""></option>
                                <option value="Public">Öffentlich</option>
                                <option value="Private">Privat</option>
                            </select>
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonModel.Visibility) />
                        </div>
                    </div>
                </div>
            </div>

            <hr class="featurette-divder" />

            <div class="form-group mt-3">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Status</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <select class="form-select" @bind="dungeonModel.Status">
                                @if (DungeonMustBeInactive)
                                {
                                    <option value="Pending" selected>Inaktiv</option>
                                    <option value="Approved" disabled>Aktiv</option>
                                }
                                else
                                {
                                    <option selected hidden value=""></option>
                                    <option value="Approved">Aktiv</option>
                                    <option value="Pending">Inaktiv</option>
                                }
                            </select>
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonModel.Status) />
                        </div>
                    </div>
                </div>
            </div>

            <hr class="featurette-divder" />

            <div class="row  d-flex justify-content-center">
                <button class="btn btn-success" style="max-width:20rem" type="submit">Speichern</button>
            </div>
        </EditForm>

    </div>
</div>

@code {

    /// <summary>
    /// Represents wether a Dungeon has atleast 1 Room
    /// </summary>
    public bool DungeonHasRooms
    {
        get
        {
            if (dungeonRooms.Count == 0) return false;
            return true;
        }
    }

    /// <summary>
    /// Represents wether a dungeon has at least 1: Class, Race and Room to enable its activitiy
    /// </summary>
    [Parameter]
    public bool DungeonMustBeInactive { get; set; }

    /// <summary>
    /// The attribute of the validation model when creating a new Race
    /// </summary>
    DungeonModel dungeonModel = new DungeonModel();

    /// <summary>
    /// The EditContext used by the form
    /// </summary>
    EditContext dungeonContext;

    /// <summary>
    /// The List containing the Npcs of the Dungeon
    /// </summary>
    List<RoomDto> dungeonRooms = new List<RoomDto>();

    /// <summary>
    /// The Guid of the dungeon
    /// </summary>
    [Parameter]
    public Guid DungeonId { get; set; }

    ///<summary>
    /// Called when the Dungeon is saved or loaded
    ///</summary>
    [Parameter]
    public EventCallback<Guid> OnDungeonSavedOrLoaded { get; set; }

    /// <summary>
    /// The Dungeon that is being edited 
    /// </summary>
    public DungeonDto CurrentDungeon { get; set; }

    /// <summary>
    /// When true shows a message to the user, that there already is a dungeon with this name
    /// </summary>
    public bool DungeonNameAlreadyExists { get; set; }

    /// <summary>
    /// Called when the component is initialized, this method instantiates the EditContext of the form, receives data from the backend and saves them locally
    /// </summary>
    protected async override Task OnInitializedAsync()
    {
        dungeonContext = new EditContext(dungeonModel);

        if (DungeonId != Guid.Empty)
        {
            CurrentDungeon = await DungeonService.GetDungeon(DungeonId);
            dungeonModel.Name = CurrentDungeon.DungeonName;
            dungeonModel.Description = CurrentDungeon.DungeonDescription;
            dungeonModel.Epoch = CurrentDungeon.DungeonEpoch;
            dungeonModel.Status = CurrentDungeon.Status == 0 ? "Approved" : "Pending";
            dungeonModel.Visibility = CurrentDungeon.Visibility == 0 ? "Private" : "Public";
            DungeonId = CurrentDungeon.Id;
            await OnDungeonSavedOrLoaded.InvokeAsync(DungeonId);
            if (!(CurrentDungeon.DefaultRoom is null))
            {
                var roomCollection = await RoomService.GetAllRooms(DungeonId);
                if (roomCollection is not null)
                {
                    dungeonRooms = roomCollection.ToList();
                    dungeonModel.DefaultRoom = CurrentDungeon.DefaultRoom.Name;
                }
            }
        }
        StateHasChanged();
    }

    /// <summary>
    /// Sets the first created room to be the dungeons default room
    /// </summary>
    /// <param name="roomGuid"></param>
    public async void SetDefaultRoom(Guid roomGuid)
    {
        if (dungeonModel.DefaultRoom is null)
        {
            var defaultRoom = await RoomService.GetRoom(DungeonId, roomGuid);
            if (defaultRoom is not null)
            {
                dungeonRooms.Add(defaultRoom);
                dungeonModel.DefaultRoom = defaultRoom.Name;
                await HandleDungeonSubmit();
            }
            StateHasChanged();
        }
    }

    /// <summary>
    /// Reloads the rooms of this very dungeon
    /// </summary>
    public async void ReloadDungeonRooms()
    {
        var dungeonList = await RoomService.GetAllRooms(DungeonId);
        if (dungeonList is not null) dungeonRooms = dungeonList.ToList();
        StateHasChanged();
    }

    /// <summary>
    /// Handles the submition of a created Npc, validates the data and saves them locally and on the server
    /// </summary>
    /// <returns></returns>
    private async Task HandleDungeonSubmit()
    {
        DungeonNameAlreadyExists = false;
        if (DungeonMustBeInactive) dungeonModel.Status = "Pending";
        var validDungeon = dungeonContext.Validate();
        if (validDungeon)
        {
            DungeonDto submitDungeon;
            if (DungeonId != Guid.Empty) submitDungeon = CurrentDungeon;
            else submitDungeon = new DungeonDto();
            submitDungeon.DungeonName = dungeonModel.Name;
            submitDungeon.DungeonDescription = dungeonModel.Description;
            submitDungeon.DungeonEpoch = dungeonModel.Epoch;
            submitDungeon.DefaultRoom = dungeonRooms.Find(r => r.Name.Equals(dungeonModel.DefaultRoom));
            submitDungeon.Visibility = dungeonModel.Visibility.Equals("Private") ? 0 : 1;
            submitDungeon.Status = dungeonModel.Status.Equals("Approved") ? 0 : 1;
            submitDungeon.DungeonOwner = userContext.DungeonUserContext;
            if (DungeonId == Guid.Empty)
            {
                var responseGuid = await DungeonService.CreateNewDungeon(submitDungeon);
                if (responseGuid.Item1 != Guid.Empty)
                {
                    await OnDungeonSavedOrLoaded.InvokeAsync(responseGuid.Item1);
                    DungeonId = responseGuid.Item1;
                    CurrentDungeon = await DungeonService.GetDungeon(DungeonId) ?? new DungeonDto();
                }
                else if (responseGuid.Item2) DungeonNameAlreadyExists = true;
            }
            else
            {
                submitDungeon.Id = DungeonId;
                var oldDungeonDto = await DungeonService.UpdateDungeon(submitDungeon);
                if (!(oldDungeonDto is null))
                {
                    DungeonId = oldDungeonDto.Id;
                    dungeonModel.Name = oldDungeonDto.DungeonName;
                    dungeonModel.Description = oldDungeonDto.DungeonDescription;
                    dungeonModel.Epoch = oldDungeonDto.DungeonEpoch;
                    dungeonModel.Status = oldDungeonDto.Status == 0 ? "Approved" : "Pending";
                    dungeonModel.Visibility = oldDungeonDto.Visibility == 0 ? "Private" : "Pending";
                    if (!(oldDungeonDto.DefaultRoom is null))
                    {
                        dungeonModel.DefaultRoom = oldDungeonDto.DefaultRoom.Name;
                    }
                    //TODO: Maybe den User Benachrichtigen über Fehler?
                }

            }
        }
    }
}

