@using Apollon.Mud.Client.Data.Models.Dungeon
@using Apollon.Mud.Shared.Dungeon.Room
@using Apollon.Mud.Shared.Dungeon.Inspectable
@using Apollon.Mud.Shared.Dungeon.Inspectable.Takeable
@using Apollon.Mud.Shared.Dungeon.Inspectable.Takeable.Consumable
@using Apollon.Mud.Shared.Dungeon.Inspectable.Takeable.Usable
@using Apollon.Mud.Shared.Dungeon.Inspectable.Takeable.Wearable
@using Apollon.Mud.Shared.Dungeon.Requestable
@using Apollon.Mud.Shared.Dungeon.Npc
@inject Apollon.Mud.Client.Services.Interfaces.IRoomService RoomService
@inject Apollon.Mud.Client.Services.Interfaces.INpcService NpcService
@inject Apollon.Mud.Client.Services.Interfaces.ISpecialActionService ActionService
@inject Apollon.Mud.Client.Services.Interfaces.IInspectableService InspectableService
@inject Apollon.Mud.Client.Services.Interfaces.ITakeableService TakeableService
@inject Apollon.Mud.Client.Services.Interfaces.IConsumableService ConsumableService
@inject Apollon.Mud.Client.Services.Interfaces.IWearableService WearableService
@inject Apollon.Mud.Client.Services.Interfaces.IUsableService UsableService

<div class="card">
    <div class="card-header">
        <h2>Räume</h2>
    </div>
    <div class="card-body">

        <EditForm EditContext="@roomContext" OnSubmit="@HandleRoomSubmit" novalidate>
            <DataAnnotationsValidator />

            <div class="form-group">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Raumauswahl</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <select class="form-select" aria-label="Default select example" @bind="chosenRoom" @onselect="@RoomSelectionChanged()" @onselect:stopPropagation="true">
                                <option value="NoRoom" selected hidden>Neuer Raum</option>
                                @if (!(dungeonRooms is null))
                                {
                                    @foreach (RoomDto dungeonRoom in dungeonRooms)
                                    {
                                        <option value="@dungeonRoom.Name">@dungeonRoom.Name</option>
                                    }
                                }
                            </select>
                            <button class="btn btn-outline-primary ms-3" style="width:3rem; font-size:20px" type="button" @onclick="NewRoomButtonClicked">
                                <TooltipComponent Text="Neuen Raum erstellen">
                                    <strong>+</strong>
                                </TooltipComponent>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <hr class="featurette-divider" />

            <div class="form-group mt-2">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Name</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <InputText class="form-control" placeholder="Name" id="Name" @bind-Value="dungeonRoomModel.Name" @onfocusout="NameFieldLostFocus" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonRoomModel.Name) />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Beschreibung</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <InputTextArea class="form-control" placeholder="Beschreibung" @bind-Value="dungeonRoomModel.Description" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonRoomModel.Description) />
                        </div>
                    </div>
                </div>
            </div>

            <hr class="featurette-divider" />

            <div class="row">
                <div class="col-lg-12 d-flex justify-content-center">
                    <h4 class="mt-1">Item-Auswahl</h4>
                </div>
            </div>

            <div class="row mt-2">
                <div class="col-2" />
                <div class="col-4">
                    @if (roomItemCount < 8)
                    {
                        <button class="btn btn-outline-secondary ms-1" style="max-width:15rem" type="button" @onclick="AddItemButtonClicked">Raumitem hinzufügen</button>
                    }
                    else
                    {
                        <TooltipComponent Text="Maximum erreicht">
                            <button class="btn btn-outline-secondary ms-1" style="max-width:15rem" type="button" disabled>Raumitem hinzufügen</button>
                        </TooltipComponent>
                    }
                </div>
                <div class="col-4">
                    @if (roomItemCount >= 1)
                    {
                        <button class="btn btn-outline-secondary me-1" style="max-width:15rem" type="button" @onclick="RemoveItemButtonClicked">Raumitem entfernen</button>
                    }
                    else
                    {
                        <TooltipComponent Text="Minimum erreicht">
                            <button class="btn btn-outline-secondary" style="max-width:15rem" type="button" disabled>Raumitem entfernen</button>
                        </TooltipComponent>
                    }
                </div>
            </div>

            @if (roomItemCount >= 1)
            {
                <div class="form-group mt-5">
                    <div class="row">
                        <div class="col-4">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="itemCategory[0]">
                                    <option value="NoCategory" selected disabled hidden>Kategorie</option>
                                    <option value="Inspectable">Untersuchbar</option>
                                    <option value="Takeable">Aufnehmbar</option>
                                    <option value="Consumable">Konsumierbar</option>
                                    <option value="Usable">Nutzbar</option>
                                    <option value="Wearable">Kleidung</option>
                                </select>
                            </div>
                        </div>
                        <div class="col">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="roomItems[0]">
                                    <option value="NoItem" selected hidden></option>
                                    @if (itemCategory[0].Equals("Inspectable"))
                                    {
                                        @foreach (InspectableDto inspectable in dungeonInspectables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[0].Equals("Takeable"))
                                    {
                                        @foreach (TakeableDto inspectable in dungeonTakeables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[0].Equals("Consumable"))
                                    {
                                        @foreach (ConsumableDto consumable in dungeonConsumables)
                                        {
                                            <option value="@consumable.Name">@consumable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[0].Equals("Usable"))
                                    {
                                        @foreach (UsableDto usable in dungeonUsables)
                                        {
                                            <option value="@usable.Name">@usable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[0].Equals("Wearable"))
                                    {
                                        @foreach (WearableDto wearable in dungeonWearables)
                                        {
                                            <option value="@wearable.Name">@wearable.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

            }
            @if (roomItemCount >= 2)
            {
                <div class="form-group mt-5">
                    <div class="row">
                        <div class="col-4">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="itemCategory[1]">
                                    <option value="" selected disabled hidden>Kategorie</option>
                                    <option value="Inspectable">Untersuchbar</option>
                                    <option value="Takeable">Aufnehmbar</option>
                                    <option value="Consumable">Konsumierbar</option>
                                    <option value="Usable">Nutzbar</option>
                                    <option value="Wearable">Kleidung</option>
                                </select>
                            </div>
                        </div>
                        <div class="col">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="roomItems[1]">
                                    @if (itemCategory[1].Equals("Inspectable"))
                                    {
                                        @foreach (InspectableDto inspectable in dungeonInspectables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[1].Equals("Takeable"))
                                    {
                                        @foreach (TakeableDto inspectable in dungeonTakeables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[1].Equals("Consumable"))
                                    {
                                        @foreach (ConsumableDto consumable in dungeonConsumables)
                                        {
                                            <option value="@consumable.Name">@consumable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[1].Equals("Usable"))
                                    {
                                        @foreach (UsableDto usable in dungeonUsables)
                                        {
                                            <option value="@usable.Name">@usable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[1].Equals("Wearable"))
                                    {
                                        @foreach (WearableDto wearable in dungeonWearables)
                                        {
                                            <option value="@wearable.Name">@wearable.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (roomItemCount >= 3)
            {
                <div class="form-group mt-5">
                    <div class="row">
                        <div class="col-4">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="itemCategory[2]">
                                    <option value="" selected disabled hidden>Kategorie</option>
                                    <option value="Inspectable">Untersuchbar</option>
                                    <option value="Takeable">Aufnehmbar</option>
                                    <option value="Consumable">Konsumierbar</option>
                                    <option value="Usable">Nutzbar</option>
                                    <option value="Wearable">Kleidung</option>
                                </select>
                            </div>
                        </div>
                        <div class="col">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="roomItems[2]">
                                    @if (itemCategory[2].Equals("Inspectable"))
                                    {
                                        @foreach (InspectableDto inspectable in dungeonInspectables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[2].Equals("Takeable"))
                                    {
                                        @foreach (TakeableDto inspectable in dungeonTakeables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[2].Equals("Consumable"))
                                    {
                                        @foreach (ConsumableDto consumable in dungeonConsumables)
                                        {
                                            <option value="@consumable.Name">@consumable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[2].Equals("Usable"))
                                    {
                                        @foreach (UsableDto usable in dungeonUsables)
                                        {
                                            <option value="@usable.Name">@usable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[2].Equals("Wearable"))
                                    {
                                        @foreach (WearableDto wearable in dungeonWearables)
                                        {
                                            <option value="@wearable.Name">@wearable.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (roomItemCount >= 4)
            {
                <div class="form-group mt-5">
                    <div class="row">
                        <div class="col-4">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="itemCategory[3]">
                                    <option value="" selected disabled hidden>Kategorie</option>
                                    <option value="Inspectable">Untersuchbar</option>
                                    <option value="Takeable">Aufnehmbar</option>
                                    <option value="Consumable">Konsumierbar</option>
                                    <option value="Usable">Nutzbar</option>
                                    <option value="Wearable">Kleidung</option>
                                </select>
                            </div>
                        </div>
                        <div class="col">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="roomItems[3]">
                                    @if (itemCategory[3].Equals("Inspectable"))
                                    {
                                        @foreach (InspectableDto inspectable in dungeonInspectables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[3].Equals("Takeable"))
                                    {
                                        @foreach (TakeableDto inspectable in dungeonTakeables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[3].Equals("Consumable"))
                                    {
                                        @foreach (ConsumableDto consumable in dungeonConsumables)
                                        {
                                            <option value="@consumable.Name">@consumable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[3].Equals("Usable"))
                                    {
                                        @foreach (UsableDto usable in dungeonUsables)
                                        {
                                            <option value="@usable.Name">@usable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[3].Equals("Wearable"))
                                    {
                                        @foreach (WearableDto wearable in dungeonWearables)
                                        {
                                            <option value="@wearable.Name">@wearable.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (roomItemCount >= 5)
            {
                <div class="form-group mt-5">
                    <div class="row">
                        <div class="col-4">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="itemCategory[4]">
                                    <option value="" selected disabled hidden>Kategorie</option>
                                    <option value="Inspectable">Untersuchbar</option>
                                    <option value="Takeable">Aufnehmbar</option>
                                    <option value="Consumable">Konsumierbar</option>
                                    <option value="Usable">Nutzbar</option>
                                    <option value="Wearable">Kleidung</option>
                                </select>
                            </div>
                        </div>
                        <div class="col">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="roomItems[4]">
                                    @if (itemCategory[4].Equals("Inspectable"))
                                    {
                                        @foreach (InspectableDto inspectable in dungeonInspectables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[4].Equals("Takeable"))
                                    {
                                        @foreach (TakeableDto inspectable in dungeonTakeables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[4].Equals("Consumable"))
                                    {
                                        @foreach (ConsumableDto consumable in dungeonConsumables)
                                        {
                                            <option value="@consumable.Name">@consumable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[4].Equals("Usable"))
                                    {
                                        @foreach (UsableDto usable in dungeonUsables)
                                        {
                                            <option value="@usable.Name">@usable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[4].Equals("Wearable"))
                                    {
                                        @foreach (WearableDto wearable in dungeonWearables)
                                        {
                                            <option value="@wearable.Name">@wearable.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (roomItemCount >= 6)
            {
                <div class="form-group mt-5">
                    <div class="row">
                        <div class="col-4">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="itemCategory[5]">
                                    <option value="" selected disabled hidden>Kategorie</option>
                                    <option value="Inspectable">Untersuchbar</option>
                                    <option value="Takeable">Aufnehmbar</option>
                                    <option value="Consumable">Konsumierbar</option>
                                    <option value="Usable">Nutzbar</option>
                                    <option value="Wearable">Kleidung</option>
                                </select>
                            </div>
                        </div>
                        <div class="col">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="roomItems[5]">
                                    @if (itemCategory[5].Equals("Inspectable"))
                                    {
                                        @foreach (InspectableDto inspectable in dungeonInspectables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[5].Equals("Takeable"))
                                    {
                                        @foreach (TakeableDto inspectable in dungeonTakeables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[5].Equals("Consumable"))
                                    {
                                        @foreach (ConsumableDto consumable in dungeonConsumables)
                                        {
                                            <option value="@consumable.Name">@consumable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[5].Equals("Usable"))
                                    {
                                        @foreach (UsableDto usable in dungeonUsables)
                                        {
                                            <option value="@usable.Name">@usable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[5].Equals("Wearable"))
                                    {
                                        @foreach (WearableDto wearable in dungeonWearables)
                                        {
                                            <option value="@wearable.Name">@wearable.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (roomItemCount >= 7)
            {
                <div class="form-group mt-5">
                    <div class="row">
                        <div class="col-4">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="itemCategory[6]">
                                    <option value="" selected disabled hidden>Kategorie</option>
                                    <option value="Inspectable">Untersuchbar</option>
                                    <option value="Takeable">Aufnehmbar</option>
                                    <option value="Consumable">Konsumierbar</option>
                                    <option value="Usable">Nutzbar</option>
                                    <option value="Wearable">Kleidung</option>
                                </select>
                            </div>
                        </div>
                        <div class="col">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="roomItems[6]">
                                    @if (itemCategory[6].Equals("Inspectable"))
                                    {
                                        @foreach (InspectableDto inspectable in dungeonInspectables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[6].Equals("Takeable"))
                                    {
                                        @foreach (TakeableDto inspectable in dungeonTakeables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[6].Equals("Consumable"))
                                    {
                                        @foreach (ConsumableDto consumable in dungeonConsumables)
                                        {
                                            <option value="@consumable.Name">@consumable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[6].Equals("Usable"))
                                    {
                                        @foreach (UsableDto usable in dungeonUsables)
                                        {
                                            <option value="@usable.Name">@usable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[6].Equals("Wearable"))
                                    {
                                        @foreach (WearableDto wearable in dungeonWearables)
                                        {
                                            <option value="@wearable.Name">@wearable.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (roomItemCount >= 8)
            {
                <div class="form-group mt-5">
                    <div class="row">
                        <div class="col-4">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="itemCategory[7]">
                                    <option value="" selected disabled hidden>Kategorie</option>
                                    <option value="Inspectable">Untersuchbar</option>
                                    <option value="Takeable">Aufnehmbar</option>
                                    <option value="Consumable">Konsumierbar</option>
                                    <option value="Usable">Nutzbar</option>
                                    <option value="Wearable">Kleidung</option>
                                </select>
                            </div>
                        </div>
                        <div class="col">
                            <div class="d-flex justify-content-center">
                                <select class="form-select" @bind="roomItems[7]">
                                    @if (itemCategory[7].Equals("Inspectable"))
                                    {
                                        @foreach (InspectableDto inspectable in dungeonInspectables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[7].Equals("Takeable"))
                                    {
                                        @foreach (TakeableDto inspectable in dungeonTakeables)
                                        {
                                            <option value="@inspectable.Name">@inspectable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[7].Equals("Consumable"))
                                    {
                                        @foreach (ConsumableDto consumable in dungeonConsumables)
                                        {
                                            <option value="@consumable.Name">@consumable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[7].Equals("Usable"))
                                    {
                                        @foreach (UsableDto usable in dungeonUsables)
                                        {
                                            <option value="@usable.Name">@usable.Name</option>
                                        }
                                    }
                                    @if (itemCategory[7].Equals("Wearable"))
                                    {
                                        @foreach (WearableDto wearable in dungeonWearables)
                                        {
                                            <option value="@wearable.Name">@wearable.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <hr class="featurette-divider mt-3" />

            <div class="form-group">
                <div class="row">
                    <div class="col-lg-12 d-flex justify-content-center">
                        <h4 class="mt-1">Nachbarräume</h4>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12 d-flex justify-content-center">
                        <h5 class="mt-1">Norden</h5>
                    </div>
                </div>
                <div class="row">
                    <div class="col"></div>
                    <div class="col">
                        <select class="form-select" @bind="dungeonRoomModel.RoomNorth">
                            @if (!(dungeonRooms is null))
                            {
                                <option value="NoRoom" selected>Kein Nachbar</option>
                                @foreach (RoomDto dungeonRoom in dungeonRooms)
                                {
                                    @if (!dungeonRoom.Name.Equals(chosenRoom) &&
                                          !dungeonRoom.Name.Equals(dungeonRoomModel.RoomEast) &&
                                          !dungeonRoom.Name.Equals(dungeonRoomModel.RoomWest) &&
                                          !dungeonRoom.Name.Equals(dungeonRoomModel.RoomSouth) &&
                                          (dungeonRoom.NeighborSouthId == Guid.Empty))
                                    {
                                        <option value="@dungeonRoom.Name">@dungeonRoom.Name</option>
                                    }
                                }
                            }
                        </select>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonRoomModel.RoomNorth) />
                        </div>
                    </div>
                    <div class="col"></div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h5 class="mt-1">Westen</h5>
                    <div class="d-flex justify-content-center">
                        <select class="form-select" @bind="dungeonRoomModel.RoomWest">
                            @if (!(dungeonRooms is null))
                            {
                                <option value="NoRoom" selected>Kein Nachbar</option>
                                @foreach (RoomDto dungeonRoom in dungeonRooms)
                                {
                                    @if (!dungeonRoom.Name.Equals(chosenRoom) &&
                                         !dungeonRoom.Name.Equals(dungeonRoomModel.RoomEast) &&
                                         !dungeonRoom.Name.Equals(dungeonRoomModel.RoomNorth) &&
                                         !dungeonRoom.Name.Equals(dungeonRoomModel.RoomSouth) &&
                                         (dungeonRoom.NeighborEastId == Guid.Empty))
                                    {
                                        <option value="@dungeonRoom.Name">@dungeonRoom.Name</option>
                                    }
                                }
                            }
                        </select>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonRoomModel.RoomWest) />
                        </div>
                    </div>
                </div>
                <div class="col"></div>
                <div class="col">
                    <div class="d-flex justify-content-end">
                        <h5 class="mt-1">Osten</h5>
                    </div>
                    <div class="d-flex justify-content-end">
                        <select class="form-select" @bind="dungeonRoomModel.RoomEast">
                            @if (!(dungeonRooms is null))
                            {
                                <option value="NoRoom" selected>Kein Nachbar</option>
                                @foreach (RoomDto dungeonRoom in dungeonRooms)
                                {
                                    @if (!dungeonRoom.Name.Equals(chosenRoom) &&
                                         !dungeonRoom.Name.Equals(dungeonRoomModel.RoomNorth) &&
                                         !dungeonRoom.Name.Equals(dungeonRoomModel.RoomWest) &&
                                         !dungeonRoom.Name.Equals(dungeonRoomModel.RoomSouth) &&
                                         (dungeonRoom.NeighborWestId == Guid.Empty))
                                    {
                                        <option value="@dungeonRoom.Name">@dungeonRoom.Name</option>
                                    }
                                }
                            }
                        </select>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonRoomModel.RoomEast) />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col"></div>
                <div class="col">
                    <select class="form-select" @bind="dungeonRoomModel.RoomSouth">
                        @if (!(dungeonRooms is null))
                        {
                            <option value="NoRoom" selected>Kein Nachbar</option>
                            @foreach (RoomDto dungeonRoom in dungeonRooms)
                            {
                                @if (!dungeonRoom.Name.Equals(chosenRoom) &&
                                     !dungeonRoom.Name.Equals(dungeonRoomModel.RoomEast) &&
                                     !dungeonRoom.Name.Equals(dungeonRoomModel.RoomWest) &&
                                     !dungeonRoom.Name.Equals(dungeonRoomModel.RoomNorth) &&
                                     (dungeonRoom.NeighborNorthId == Guid.Empty))
                                {
                                    <option value="@dungeonRoom.Name">@dungeonRoom.Name</option>
                                }
                            }
                        }
                    </select>
                    <h5 class="mt-1 text-center">Süden</h5>
                    <div class="text-danger">
                        <ValidationMessage For=@(() => dungeonRoomModel.RoomSouth) />
                    </div>
                </div>
                <div class="col"></div>
            </div>

            <hr class="featurette-divider" />

            <div class="row">
                <div class="col-lg-12 d-flex justify-content-center">
                    <h4 class="mt-1">NPCs</h4>
                </div>
            </div>

            <div class="row">
                <div class="col-8">
                    <select class="form-select" @bind="selectedNpc">
                        <option value="NoNpc" selected hidden></option>
                        @if (!(dungeonNpcs is null))
                        {
                            @foreach (NpcDto npc in dungeonNpcs)
                            {
                                @if (roomNpcs.Find(r => r.Name == npc.Name) is null)
                                {
                                    <option value="@npc.Name">@npc.Name</option>
                                }
                            }
                        }
                    </select>
                </div>
                <div class="col-4">
                    @if (specialActionCount <= dungeonNpcs.Count() && selectedNpc != "NoNpc")
                    {
                        <button class="btn btn-outline-secondary ms-1" style="max-width:15rem" type="button" @onclick="AddNpcButtonClicked">NPC hinzufügen</button>
                    }
                    else
                    {
                        if (selectedNpc == "NoNpc")
                        {
                            <TooltipComponent Text="Wähle einen NPC">
                                <button class="btn btn-outline-secondary ms-1" style="max-width:15rem" type="button" disabled>NPC hinzufügen</button>
                            </TooltipComponent>
                        }
                        else
                        {
                            <TooltipComponent Text="Maximum erreicht">
                                <button class="btn btn-outline-secondary ms-1" style="max-width:15rem" type="button" disabled>NPC hinzufügen</button>
                            </TooltipComponent>
                        }
                    }
                </div>
            </div>

            <div class="table table-bordered mt-3">
                @{int npcIndex = 1;}
                @foreach (NpcDto npc in roomNpcs)
                {
                    <div class="card p-0">
                        <div class="row">
                            <div class="col-4">
                                <div style="vertical-align:middle; text-align:center">
                                    <span><strong>Npc @npcIndex</strong></span>
                                </div>
                            </div>
                            <div class="col">
                                <div style="vertical-align:middle">
                                    <span>@npc.Name</span>
                                </div>
                            </div>
                            <div class="col-1">
                                <button class="btn btn-outline-secondary " style="width:1.75rem; height:1.75rem; padding: 0" type="button" @onclick="(() => RemoveNpcButtonClicked(npc))">
                                    <TooltipComponent Text="Npc entfernen">
                                        <span style="vertical-align:middle"><strong>-</strong></span>
                                    </TooltipComponent>
                                </button>
                            </div>
                        </div>
                    </div>
                    npcIndex++;
                }
            </div>

            <hr class="featurette-divider" />

            <div class="row">
                <div class="col-lg-12 d-flex justify-content-center">
                    <TooltipComponent Text="Füge deine Befehle einem Raum hinzu"><h4 class="mt-1">Eigene Befehle</h4></TooltipComponent>
                </div>
            </div>

            <div class="row">
                <div class="col-8">
                    <select class="form-select" @bind="selectedRequestable">
                        <option value="NoAction" selected hidden></option>
                        @if (!(dungeonRequestables is null))
                        {
                            @foreach (RequestableDto requestable in dungeonRequestables)
                            {
                                @if (roomRequestables.Find(r => r.PatternForPlayer == requestable.PatternForPlayer) is null)
                                {
                                    <option value="@requestable.PatternForPlayer">@requestable.PatternForPlayer</option>
                                }
                            }
                        }
                    </select>
                </div>
                <div class="col">
                    @if (specialActionCount <= dungeonRequestables.Count() && selectedRequestable != "NoAction")
                    {
                        <button class="btn btn-outline-secondary ms-1" type="button" @onclick="AddActionButtonClicked">Befehl hinzufügen</button>
                    }
                    else
                    {
                        if (selectedRequestable == "NoAction")
                        {
                            <TooltipComponent Text="Wähle einen Befehl">
                                <button class="btn btn-outline-secondary ms-1" type="button" disabled>Befehl hinzufügen</button>
                            </TooltipComponent>
                        }
                        else
                        {
                            <TooltipComponent Text="Maximum erreicht">
                                <button class="btn btn-outline-secondary ms-1" type="button" disabled>Befehl hinzufügen</button>
                            </TooltipComponent>
                        }
                    }
                </div>
            </div>
            <div class="table table-bordered mt-3">
                @{int requestIndex = 1;}
                @foreach (RequestableDto requestable in roomRequestables)
                {
                    <div class="card p-0">
                        <div class="row">
                            <div class="col-4">
                                <div style="vertical-align:middle; text-align:center">
                                    <span><strong>Befehl @requestIndex</strong></span>
                                </div>
                            </div>
                            <div class="col">
                                <div style="vertical-align:middle">
                                    <span>@requestable.PatternForPlayer</span>
                                </div>
                            </div>
                            <div class="col-1">
                                <button class="btn btn-outline-secondary " style="width:1.75rem; height:1.75rem; padding: 0" type="button" @onclick="(() => RemoveActionButtonClicked(requestable))">
                                    <TooltipComponent Text="Befehl entfernen">
                                        <span style="vertical-align:middle"><strong>-</strong></span>
                                    </TooltipComponent>
                                </button>
                            </div>
                        </div>
                    </div>
                    requestIndex++;
                }
            </div>
            <hr class="featurette-divider" />

            <div class="form-group mt-3">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Status</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <select class="form-select" @bind="dungeonRoomModel.Status">
                                <option selected hidden value=""></option>
                                <option value="Approved">Aktiv</option>
                                <option value="Pending">Inaktiv</option>
                            </select>
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonRoomModel.Status) />
                        </div>
                    </div>
                </div>
            </div>

            <hr class="featurette-divder" />

            <div class="row">
                <div class="col-3">

                </div>
                <div class="col">
                    <button class="btn btn-success" style="width:20rem" type="submit">Speichern</button>
                </div>
                <div class="col">
                    @if (!(chosenRoom == "NoRoom"))
                    {
                        <button class="btn btn-danger float-end" type="button" @onclick="RemoveRoomButtonClicked">Entfernen</button>
                    }
                </div>
            </div>

        </EditForm>

    </div>
</div>

@code {

    #region Dungeon Information

    /// <summary>
    /// TODO
    /// </summary>
    [Parameter]
    public bool IsDungeonMasterConfigurating { get; set; }

    /// <summary>
    /// TODO
    /// </summary>
    [Parameter]
    public Guid DungeonId { get; set; }

    ///<summary>
    /// TODO
    ///</summary>
    [Parameter]
    public EventCallback OnRoomSavedOrLoaded { get; set; }

    ///<summary>
    /// TODO
    ///</summary>
    [Parameter]
    public EventCallback<Guid> FirstRoomSavedOrLoaded { get; set; }

    #endregion

    #region Dungeon Room Model

    /// <summary>
    /// TODO
    /// </summary>
    DungeonRoomModel dungeonRoomModel = new DungeonRoomModel();

    /// <summary>
    /// TODO
    /// </summary>
    EditContext roomContext;

    /// <summary>
    /// TODO
    /// </summary>
    List<RoomDto> dungeonRooms = new List<RoomDto>();

    #endregion

    #region Bound Variables

    /// <summary>
    /// Initializes the item category
    /// </summary>
    string[] itemCategory = new string[8];

    /// <summary>
    /// Initializes the item in the room
    /// </summary>
    string[] roomItems = new string[8];

    /// <summary>
    /// The room selected by default is the "NoRoom".
    /// </summary>
    string chosenRoom = "NoRoom";

    /// <summary>
    /// TODO Abhilfe
    /// </summary>
    List<RequestableDto> roomRequestables = new List<RequestableDto>();

    /// <summary>
    /// The context of the room is customizable
    /// </summary>
    string selectedRequestable = "NoAction";

    /// <summary>
    /// Lists the data to be managed in the room
    /// </summary>
    List<NpcDto> roomNpcs = new List<NpcDto>();

    /// <summary>
    /// The Name of the NPC selected in the "Add Npc" Dropdown
    /// </summary>
    string selectedNpc = "NoNpc";

    #endregion

    #region Item Lists

    /// <summary>
    /// Lists the inspectable items in the room
    /// </summary>
    List<InspectableDto> dungeonInspectables = new List<InspectableDto>();

    /// <summary>
    /// Lists the items that can be picked up in the room
    /// </summary>
    List<TakeableDto> dungeonTakeables = new List<TakeableDto>();

    /// <summary>
    /// Lists the consumable items in the room
    /// </summary>
    List<ConsumableDto> dungeonConsumables = new List<ConsumableDto>();

    /// <summary>
    /// Lists the wearing items in the room
    /// </summary>
    List<WearableDto> dungeonWearables = new List<WearableDto>();

    /// <summary>
    /// Lists the items that can be used in the room
    /// </summary>
    List<UsableDto> dungeonUsables = new List<UsableDto>();

    /// <summary>
    /// TODO
    /// </summary>
    List<RequestableDto> dungeonRequestables = new List<RequestableDto>();

    /// <summary>
    /// TODO
    /// </summary>
    List<NpcDto> dungeonNpcs = new List<NpcDto>();

    #endregion

    #region Item Dropdown Counters

    /// <summary>
    /// When an item is kicked out of the inventory,
    /// the number of items in the room changes
    /// </summary>
    int roomItemCount = 1;

    /// <summary>
    /// TODO
    /// </summary>
    int specialActionCount = 0;

    #endregion

    /// <summary>
    /// TODO Abhilfe
    /// </summary>
    protected async override Task OnInitializedAsync()
    {
        dungeonRoomModel.RoomNorth = "NoRoom";
        dungeonRoomModel.RoomSouth = "NoRoom";
        dungeonRoomModel.RoomWest = "NoRoom";
        dungeonRoomModel.RoomEast = "NoRoom";
        roomContext = new EditContext(dungeonRoomModel);
        for (int i = 0; i < 8; i++)
        {
            itemCategory[i] = string.Empty;
        }
        if (DungeonId != Guid.Empty)
        {
            var dungeonRoomCollection = await RoomService.GetAllRooms(DungeonId);
            if (!(dungeonRoomCollection is null))
            {
                dungeonRooms = dungeonRoomCollection.ToList();
                await OnRoomSavedOrLoaded.InvokeAsync();
            }
        }
        StateHasChanged();
    }

    /// <summary>
    /// The method manages the save function when specific changes have been made in the room
    /// </summary>
    /// <returns></returns>
    private async Task HandleRoomSubmit()
    {
        var validRoom = roomContext.Validate();
        if (validRoom && DungeonId != Guid.Empty)
        {
            bool newRoom = false;
            RoomDto submitRoom = dungeonRooms.Find(r => r.Name.Equals(dungeonRoomModel.Name));
            if (submitRoom is null)
            {
                submitRoom = new RoomDto();
                newRoom = true;
            }
            submitRoom.Name = dungeonRoomModel.Name;
            submitRoom.Description = dungeonRoomModel.Description;
            submitRoom.Status = dungeonRoomModel.Status.Equals("Approved") ? 0 : 1;
            submitRoom.Inspectables = new List<InspectableDto>();
            submitRoom.Takeables = new List<TakeableDto>();
            submitRoom.Usables = new List<UsableDto>();
            submitRoom.Consumables = new List<ConsumableDto>();
            submitRoom.Wearables = new List<WearableDto>();
            submitRoom.SpecialActions = roomRequestables;
            submitRoom.Npcs = roomNpcs;
            for (int i = 0; i < roomItemCount; i++)
            {
                switch (itemCategory[i])
                {
                    case "Inspectable":
                        submitRoom.Inspectables.Add(dungeonInspectables.Find(r => r.Name.Equals(roomItems[i])));
                        break;
                    case "Takeable":
                        submitRoom.Takeables.Add(dungeonTakeables.Find(r => r.Name.Equals(roomItems[i])));
                        break;
                    case "Consumable":
                        submitRoom.Consumables.Add(dungeonConsumables.Find(r => r.Name.Equals(roomItems[i])));
                        break;
                    case "Wearable":
                        submitRoom.Wearables.Add(dungeonWearables.Find(r => r.Name.Equals(roomItems[i])));
                        break;
                    case "Usable":
                        submitRoom.Usables.Add(dungeonUsables.Find(r => r.Name.Equals(roomItems[i])));
                        break;
                }
            }
            if (!dungeonRoomModel.RoomNorth.Equals("NoRoom"))
            {
                submitRoom.NeighborNorthId = dungeonRooms.Find(r => r.Name.Equals(dungeonRoomModel.RoomNorth)).Id;
                ReloadNeighbour(submitRoom.NeighborNorthId);
            }
            else submitRoom.NeighborNorthId = Guid.Empty;

            if (!dungeonRoomModel.RoomEast.Equals("NoRoom"))
            {
                submitRoom.NeighborEastId = dungeonRooms.Find(r => r.Name.Equals(dungeonRoomModel.RoomEast)).Id;
                ReloadNeighbour(submitRoom.NeighborEastId);
            }
            else submitRoom.NeighborEastId = Guid.Empty;

            if (!dungeonRoomModel.RoomSouth.Equals("NoRoom"))
            {
                submitRoom.NeighborSouthId = dungeonRooms.Find(r => r.Name.Equals(dungeonRoomModel.RoomSouth)).Id;
                ReloadNeighbour(submitRoom.NeighborSouthId);
            }
            else submitRoom.NeighborSouthId = Guid.Empty;

            if (!dungeonRoomModel.RoomWest.Equals("NoRoom"))
            {
                submitRoom.NeighborWestId = dungeonRooms.Find(r => r.Name.Equals(dungeonRoomModel.RoomWest)).Id;
                ReloadNeighbour(submitRoom.NeighborWestId);
            }
            else submitRoom.NeighborWestId = Guid.Empty;

            if (newRoom)
            {
                var response = await RoomService.CreateNewRoom(submitRoom, DungeonId);
                if (response != Guid.Empty)
                {
                    submitRoom.Id = response;
                    await FirstRoomSavedOrLoaded.InvokeAsync(response);
                    await OnRoomSavedOrLoaded.InvokeAsync();
                    dungeonRooms.Add(submitRoom);
                    chosenRoom = dungeonRoomModel.Name;
                }
            }
            else
            {
                var response = await RoomService.UpdateRoom(submitRoom, DungeonId);
                if (!response)
                {
                    var oldRoom = await RoomService.GetRoom(submitRoom.Id, DungeonId);
                    if(oldRoom is not null) WriteBackRoom(oldRoom);
                }
                else await OnRoomSavedOrLoaded.InvokeAsync();
            }
            StateHasChanged();
        }
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <returns></returns>
    private EventCallback RoomSelectionChanged()
    {
        if (!chosenRoom.Equals(dungeonRoomModel.Name) && !chosenRoom.Equals("NoRoom"))
        {
            var newRoom = dungeonRooms.Find(r => r.Name.Equals(chosenRoom));
            WriteBackRoom(newRoom);
        }
        return EventCallback.Empty;
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="args"></param>
    private void NameFieldLostFocus(System.EventArgs args)
    {
        var checkRoom = dungeonRooms.Find(r => r.Name.Equals(dungeonRoomModel.Name));
        if (checkRoom is null)
        {
            return;
        }
        else
        {
            chosenRoom = checkRoom.Name;
            WriteBackRoom(checkRoom);
        }
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="newRoom"></param>
    private void WriteBackRoom(RoomDto newRoom)
    {
        if (!(newRoom is null))
        {
            dungeonRoomModel.Name = newRoom.Name;
            dungeonRoomModel.Description = newRoom.Description;

            #region Room Items

            roomItemCount = 0;
            int counter = 0;
            for (int i = 0; i < 8; i++)
            {
                roomItems[i] = "NoItem";
                itemCategory[i] = "NoCategory";
            }

            if (!(newRoom.Inspectables is null))
            {
                newRoom.Inspectables.ToList().ForEach(i =>
                {
                    if (!(i is null) && (!i.Name.Equals(string.Empty)))
                    {
                        itemCategory[counter] = "Inspectable";
                        roomItems[counter] = i.Name;
                        counter++;
                        roomItemCount++;
                    }
                });
            }
            if (!(newRoom.Takeables is null))
            {
                newRoom.Takeables.ToList().ForEach(i =>
                {
                    if (!(i is null) && (!i.Name.Equals(string.Empty)))
                    {
                        itemCategory[counter] = "Takeable";
                        roomItems[counter] = i.Name;
                        counter++;
                        roomItemCount++;
                    }
                });
            }
            if (!(newRoom.Consumables is null))
            {
                newRoom.Consumables.ToList().ForEach(i =>
                {
                    if (!(i is null) && (!i.Name.Equals(string.Empty)))
                    {
                        itemCategory[counter] = "Consumable";
                        roomItems[counter] = i.Name;
                        counter++;
                        roomItemCount++;
                    }
                });
            }
            if (!(newRoom.Usables is null))
            {
                newRoom.Usables.ToList().ForEach(i =>
                {
                    if (!(i is null) && (!i.Name.Equals(string.Empty)))
                    {
                        itemCategory[counter] = "Usable";
                        roomItems[counter] = i.Name;
                        counter++;
                        roomItemCount++;
                    }
                });
            }
            if (!(newRoom.Wearables is null))
            {
                newRoom.Wearables.ToList().ForEach(i =>
                {
                    if (!(i is null) && (!i.Name.Equals(string.Empty)))
                    {
                        itemCategory[counter] = "Wearable";
                        roomItems[counter] = i.Name;
                        counter++;
                        roomItemCount++;
                    }
                });
            }
            #endregion

            #region Neighbours

            dungeonRoomModel.RoomNorth = newRoom.NeighborNorthId.Equals(Guid.Empty) ? "NoRoom" : dungeonRooms.Find(r => r.Id.Equals(newRoom.NeighborNorthId)).Name;

            dungeonRoomModel.RoomEast = newRoom.NeighborEastId.Equals(Guid.Empty) ? "NoRoom" : dungeonRooms.Find(r => r.Id.Equals(newRoom.NeighborEastId)).Name;

            dungeonRoomModel.RoomSouth = newRoom.NeighborSouthId.Equals(Guid.Empty) ? "NoRoom" : dungeonRooms.Find(r => r.Id.Equals(newRoom.NeighborSouthId)).Name;

            dungeonRoomModel.RoomWest = newRoom.NeighborWestId.Equals(Guid.Empty) ? "NoRoom" : dungeonRooms.Find(r => r.Id.Equals(newRoom.NeighborWestId)).Name;

            #endregion

            roomRequestables = newRoom.SpecialActions is null ? new List<RequestableDto>() : newRoom.SpecialActions.ToList();

            roomNpcs = newRoom.Npcs is null ? new List<NpcDto>() : newRoom.Npcs.ToList();

            dungeonRoomModel.Status = newRoom.Status == 0 ? "Approved" : "Pending";

            StateHasChanged();
        }
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="args"></param>
    private void NewRoomButtonClicked(System.EventArgs args)
    {
        chosenRoom = "NoRoom";
        dungeonRoomModel.Name = string.Empty;
        dungeonRoomModel.Description = string.Empty;
        dungeonRoomModel.RoomNorth = "NoRoom";
        dungeonRoomModel.RoomEast = "NoRoom";
        dungeonRoomModel.RoomWest = "NoRoom";
        dungeonRoomModel.RoomSouth = "NoRoom";
        dungeonRoomModel.Status = string.Empty;
        roomRequestables.Clear();
        roomNpcs.Clear();
        roomItemCount = 0;
        for (int i = 0; i < 8; i++)
        {
            roomItems[i] = "NoItem";
        }
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="args"></param>
    private async void RemoveRoomButtonClicked(System.EventArgs args)
    {
        var roomToDelete = dungeonRooms.Find(r => r.Name == chosenRoom);

        bool shouldFieldsBeEmptied = true;

        if (!(roomToDelete.Id == Guid.Empty)) shouldFieldsBeEmptied = await RoomService.DeleteRoom(roomToDelete.Id, DungeonId);

        if (shouldFieldsBeEmptied)
        {
            dungeonRooms.Remove(roomToDelete);
            chosenRoom = "NoRoom";
            dungeonRoomModel.Name = string.Empty;
            dungeonRoomModel.Description = string.Empty;
            dungeonRoomModel.RoomNorth = "NoRoom";
            dungeonRoomModel.RoomEast = "NoRoom";
            dungeonRoomModel.RoomWest = "NoRoom";
            dungeonRoomModel.RoomSouth = "NoRoom";
            dungeonRoomModel.Status = string.Empty;
            roomRequestables.Clear();
            roomNpcs.Clear();
            roomItemCount = 0;
            for (int i = 0; i < 8; i++)
            {
                roomItems[i] = "NoItem";
                itemCategory[i] = "NoCategory";
            }
            await OnRoomSavedOrLoaded.InvokeAsync();
            StateHasChanged();
        }
        else
        {
            //TODO Nutzer hinweisen
        }
    }

    #region Add/Remove Buttons
    /// <summary>
    /// As long as the number of items in the room is less than 8,
    /// it is possible to add one more item to the room.
    /// </summary>
    private void AddItemButtonClicked()
    {
        if (roomItemCount < 8)
            roomItemCount++;
    }

    /// <summary>
    /// As long as the number of items in the room is greater than 0,
    /// it is possible to remove an item from the room.
    /// </summary>
    private void RemoveItemButtonClicked()
    {
        if (roomItemCount > 0)
            roomItemCount--;
    }

    /// <summary>
    /// TODO
    /// </summary>
    private void AddActionButtonClicked()
    {
        if (selectedRequestable != "NoAction")
        {
            RequestableDto request = dungeonRequestables.Find(r => r.PatternForPlayer == selectedRequestable);
            if (!(request is null))
            {
                roomRequestables.Add(request);
            }
        }
        selectedRequestable = "NoAction";
    }

    /// <summary>
    /// TODO
    /// </summary>
    private EventCallback RemoveActionButtonClicked(RequestableDto request)
    {
        roomRequestables.Remove(request);
        return EventCallback.Empty;
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="npc"></param>
    /// <returns></returns>
    private EventCallback RemoveNpcButtonClicked(NpcDto npc)
    {
        roomNpcs.Remove(npc);
        return EventCallback.Empty;
    }

    /// <summary>
    /// TODO
    /// </summary>
    private void AddNpcButtonClicked()
    {
        if (selectedNpc != "NoNpc")
        {
            NpcDto npc = dungeonNpcs.Find(n => n.Name == selectedNpc);
            if (!(npc is null))
            {
                roomNpcs.Add(npc);
            }
        }
        selectedNpc = "NoNpc";
    }

    /// <summary>
    /// TODO
    /// </summary>
    public async void ReloadNpcs()
    {
        var npcList = await NpcService.GetAllNpcs(DungeonId);
        if (!(npcList is null))
        {
            dungeonNpcs = npcList.ToList();
            StateHasChanged();
        }
    }

    /// <summary>
    /// TODO
    /// </summary>
    public async void ReloadSpecialActions()
    {
        var actionList = await ActionService.GetAllRequestables(DungeonId);
        if (!(actionList is null))
        {
            dungeonRequestables = actionList.ToList();
            StateHasChanged();
        }
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="type"></param>
    public async void ReloadItems(string typeName)
    {
        switch (typeName)
        {
            case "Inspectable":
                var inspectableList = await InspectableService.GetAllInspectables(DungeonId);
                if (inspectableList != null) dungeonInspectables = inspectableList.ToList();
                break;
            case "Takeable":
                var takeableList = await TakeableService.GetAllTakeables(DungeonId);
                if (takeableList != null) dungeonTakeables = takeableList.ToList();
                break;
            case "Usable":
                var usableList = await UsableService.GetAllUsables(DungeonId);
                if (usableList != null) dungeonUsables = usableList.ToList();
                break;
            case "Wearable":
                var wearableList = await WearableService.GetAllWearables(DungeonId);
                if (wearableList != null) dungeonWearables = wearableList.ToList();
                break;
            case "Consumable":
                var consumableList = await ConsumableService.GetAllConsumables(DungeonId);
                if (consumableList != null) dungeonConsumables = consumableList.ToList();
                break;
        }
        StateHasChanged();
    }

    /// <summary>
    /// TODO
    /// </summary>
    private async void ReloadNeighbour(Guid roomId)
    {
        var updatedRoom = await RoomService.GetRoom(DungeonId, roomId);
        if (!(updatedRoom is null))
        {
            dungeonRooms.Remove(dungeonRooms.Find(r => r.Id == roomId));
            dungeonRooms.Add(updatedRoom);
            StateHasChanged();
        }
    }

    #endregion
}

