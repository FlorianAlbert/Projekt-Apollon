@using Apollon.Mud.Client.Data.Models
@using Apollon.Mud.Shared.Dungeon.Npc
@*@inject Apollon.Mud.Client.Services.Interfaces.INpcService NpcService*@

<div class="card">
    <div class="card-header">
        <h2>NPCs</h2>
    </div>
    <div class="card-body">

        <EditForm EditContext="@npcContext" OnSubmit="@HandleNpcSubmit" novalidate>
            <DataAnnotationsValidator />

            <div class="form-group">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">NPC Auswahl</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <select class="form-select" aria-label="Default select example" @bind="chosenNpc" @onselect="@NpcSelectionChanged()" @onselect:stopPropagation="true">
                                <option value="NoNpc" selected hidden>Neuer Npc</option>
                                @if (!(dungeonNpcs is null))
                                {
                                    @foreach (NpcDto dungeonNpc in dungeonNpcs)
                                    {
                                        <option value="@dungeonNpc.Name">@dungeonNpc.Name</option>
                                    }
                                }
                            </select>
                            <button class="btn btn-outline-primary ms-3" style="width:3rem; font-size:20px" type="button" @onclick="NewNpcButtonClicked"><TooltipComponent Text="Neuen NPC erstellen"><strong>+</strong></TooltipComponent></button>
                        </div>
                    </div>
                </div>
            </div>

            <hr class="featurette-divider" />

            <div class="form-group mt-2">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Name</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <InputText class="form-control" placeholder="Name" id="Name" @bind-Value="dungeonNpcModel.Name" @onfocusout="NameFieldLostFocus" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonNpcModel.Name) />
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Beschreibung</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <InputTextArea class="form-control" placeholder="Beschreibung" @bind-Value="dungeonNpcModel.Description" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonNpcModel.Description) />
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Text</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <InputTextArea class="form-control" placeholder="Text" @bind-Value="dungeonNpcModel.Text" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonNpcModel.Text) />
                        </div>
                    </div>
                </div>
            </div>

            <hr class="featurette-divider" />

            <div class="form-group mt-3">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Status</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <select class="form-select" @bind="dungeonNpcModel.Status">
                                <option selected hidden value=""></option>
                                <option value="Approved">Aktiv</option>
                                <option value="Pending">Inaktiv</option>
                            </select>
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonNpcModel.Status) />
                        </div>
                    </div>
                </div>
            </div>

            <hr class="featurette-divder" />

            <div class="row">
                <div class="col-3">

                </div>
                <div class="col">
                    <button class="btn btn-success" style="width:20rem" type="submit">Speichern</button>
                </div>
                <div class="col">
                    @if (!(chosenNpc == "NoNpc"))
                    {
                        <button class="btn btn-danger float-end" type="button" @onclick="RemoveNpcButtonClicked">Entfernen</button>
                    }
                </div>
            </div>
        </EditForm>

    </div>
</div>

@code {

    #region Dungeon Information

    /// <summary>
    /// TODO
    /// </summary>
    [Parameter]
    public bool IsDungeonMasterConfigurating { get; set; }

    /// <summary>
    /// TODO
    /// </summary>
    [Parameter]
    public Guid DungeonId { get; set; }

    #endregion

    /// <summary>
    /// The string bound to the class selectio, NoClass means no class is selected
    /// </summary>
    string chosenNpc = "NoNpc";

    /// <summary>
    /// The attribute of the validation model when creating a new Npc
    /// </summary>
    DungeonNpcModel dungeonNpcModel = new DungeonNpcModel();

    /// <summary>
    /// The EditContext used by the form
    /// </summary>
    EditContext npcContext;

    /// <summary>
    /// The List containing the Npcs of the Dungeon
    /// </summary>
    List<NpcDto> dungeonNpcs = new List<NpcDto>();

    /// <summary>
    /// Called when the component is initialized, this method instantiates the EditContext of the form, receives data from the backend and saves them locally
    /// </summary>
    protected override void OnInitialized()
    {
        npcContext = new EditContext(dungeonNpcModel);

        //dungeonNpcs = NpcService.GetAllNpcs(DungeonId).Result.ToList();

        #region to Delete
        NpcDto testNpc = new NpcDto();
        testNpc.Description = "KLa";
        testNpc.Name = "Leon";
        testNpc.Text = "Test Text????";
        dungeonNpcs.Add(testNpc);
        #endregion


    }

    /// <summary>
    /// Handles the submition of a created Npc, validates the data and saves them locally and on the server
    /// </summary>
    /// <returns></returns>
    private async Task HandleNpcSubmit()
    {
        var validNpc = npcContext.Validate();
        if (validNpc)
        {
            bool newNpc = false;
            NpcDto submitNpc = dungeonNpcs.Find(r => r.Name.Equals(dungeonNpcModel.Name));
            if (submitNpc is null)
            {
                submitNpc = new NpcDto();
                newNpc = true;
            }
            submitNpc.Name = dungeonNpcModel.Name;
            submitNpc.Description = dungeonNpcModel.Description;
            submitNpc.Text = dungeonNpcModel.Text;
            submitNpc.Status = dungeonNpcModel.Status.Equals("Approved") ? 0 : 1;
            if (newNpc)
            {
                dungeonNpcs.Add(submitNpc);
                //await NpcService.CreateNewNpc(submitNpc, DungeonId);
            }
            else
            {
                //await NpcService.UpdateNpc(submitNpc, DungeonId);
            }
            chosenNpc = dungeonNpcModel.Name;
        }
        else
        {
            //TODO Müssen wir was machen, wenn die Form nicht validiert wird?
        }
    }

    /// <summary>
    /// Called when the user selects a new npc, this method fills out the form according to the selected Npc
    /// </summary>
    /// <param name="args">Event Arguments</param>
    private EventCallback NpcSelectionChanged()
    {
        if (!chosenNpc.Equals(dungeonNpcModel.Name) && !chosenNpc.Equals("NoNpc"))
        {
            var newNpc = dungeonNpcs.Find(i => i.Name.Equals(chosenNpc));
            if (!(newNpc is null))
            {
                dungeonNpcModel.Name = chosenNpc;
                dungeonNpcModel.Description = newNpc.Description;
                dungeonNpcModel.Text = newNpc.Text;
                dungeonNpcModel.Status = newNpc.Status == 0 ? "Approved" : "Pending";
            }
        }
        return EventCallback.Empty;
    }

    /// <summary>
    /// When the Name field loses its focus, this Method checks wether a Npc with this name already exists and if so fills out the form accordingly
    /// </summary>
    /// <param name="args">Event Arguments</param>
    private void NameFieldLostFocus(System.EventArgs args)
    {
        NpcDto checkNpc = dungeonNpcs.Find(i => i.Name.Equals(dungeonNpcModel.Name));
        if (checkNpc is null)
        {
            return;
        }
        else
        {
            chosenNpc = dungeonNpcModel.Name;
            dungeonNpcModel.Description = checkNpc.Description;
            dungeonNpcModel.Text = checkNpc.Text;
            dungeonNpcModel.Status = checkNpc.Status == 0 ? "Approved" : "Pending";
        }
    }

    /// <summary>
    /// To create a new Npc this Method clears all form input fields
    /// </summary>
    /// <param name="args">Event Arguments</param>
    private void NewNpcButtonClicked(System.EventArgs args)
    {
        chosenNpc = "NoNpc";
        dungeonNpcModel.Name = string.Empty;
        dungeonNpcModel.Description = string.Empty;
        dungeonNpcModel.Text = string.Empty;
        dungeonNpcModel.Status = string.Empty;
    }

    private async void RemoveNpcButtonClicked(System.EventArgs args)
    {
        var selectedNpc = dungeonNpcs.Find(i => i.Name.Equals(chosenNpc));
        dungeonNpcs.Remove(selectedNpc);
        //await NpcService.DeleteNpc(selectedNpc.Id, DungeonId);

        chosenNpc = "NoNpc";
        dungeonNpcModel.Name = string.Empty;
        dungeonNpcModel.Description = string.Empty;
        dungeonNpcModel.Text = string.Empty;
        dungeonNpcModel.Status = string.Empty;
    }
}
