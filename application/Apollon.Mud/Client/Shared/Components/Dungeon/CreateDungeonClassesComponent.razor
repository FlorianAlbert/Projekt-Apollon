@using Apollon.Mud.Client.Data.Models.Dungeon
@using Apollon.Mud.Shared.Dungeon.Class
@using Apollon.Mud.Shared.Dungeon.Inspectable.Takeable;
@using Apollon.Mud.Shared.Dungeon.Inspectable.Takeable.Usable;
@using Apollon.Mud.Shared.Dungeon.Inspectable.Takeable.Consumable;
@using Apollon.Mud.Shared.Dungeon.Inspectable.Takeable.Wearable;
@inject Apollon.Mud.Client.Services.Interfaces.IClassService ClassService
@inject Apollon.Mud.Client.Services.Interfaces.ITakeableService TakeableService
@inject Apollon.Mud.Client.Services.Interfaces.IConsumableService ConsumableService;
@inject Apollon.Mud.Client.Services.Interfaces.IUsableService UsableService;
@inject Apollon.Mud.Client.Services.Interfaces.IWearableService WearableService;


<div class="card">
    <div class="card-header">
        <h2>Klassen</h2>
    </div>
    <div class="card-body">

        <EditForm EditContext="@classContext" OnSubmit="@HandleClassSubmit" novalidate>
            <DataAnnotationsValidator />

            <div class="form-group">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Klassenauswahl</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <select class="form-select" aria-label="Default select example" 
                                    @bind="chosenClass" 
                                    @onselect="@ClassSelectionChanged()" 
                                    @onselect:stopPropagation="true">
                                <option value="NoClass" selected hidden>Neue Klasse</option>
                                @if (!(dungeonClasses is null))
                                {
                                    @foreach (ClassDto dungeonClass in dungeonClasses)
                                    {
                                        <option value="@dungeonClass.Name">@dungeonClass.Name</option>
                                    }
                                }
                            </select>
                            <button class="btn btn-outline-primary ms-3" style="width:3rem; font-size:20px" type="button" 
                                    @onclick="NewClassButtonClicked">
                                    <TooltipComponent Text="Neue Klasse erstellen">
                                    <strong>+</strong>
                                    </TooltipComponent>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <hr class="featurette-divider" />

            <div class="form-group mt-2">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Name</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <InputText class="form-control" placeholder="Name" id="Name" @bind-Value="dungeonClassModel.Name" @onfocusout="NameFieldLostFocus" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonClassModel.Name) />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Beschreibung</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <InputTextArea class="form-control" placeholder="Beschreibung" @bind-Value="dungeonClassModel.Description" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonClassModel.Description) />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Lebenspunkte</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <InputNumber class="form-control" placeholder="Lebenspunkte" @bind-Value="dungeonClassModel.Health" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonClassModel.Health) />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Schaden</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <InputNumber class="form-control" placeholder="Schaden" @bind-Value="dungeonClassModel.Damage" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonClassModel.Damage) />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Verteidigung</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <InputNumber class="form-control" placeholder="Verteidigung" @bind-Value="@dungeonClassModel.Protection" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonClassModel.Protection) />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mt-5">
                <div class="col-3">
                    <h5 class="mt-1">Startitems</h5>
                    <span class="text-muted">Max. Inventargröße: 100</span>
                </div>
                <div class="col">
                    <select class="form-select" @bind="chosenItem">
                        <option value="null" selected hidden></option>

                        @foreach (TakeableDto takeable in dungeonTakeables)
                        {
                            @if (dungeonClassModel.InventoryTakeableDtos.Find(i => i.Id == takeable.Id) is null)
                            {
                                 <option value="@takeable.Name">@takeable.Name</option>
                            } 
                        }
                        @foreach (ConsumableDto consumable in dungeonConsumables)
                        {
                            @if (dungeonClassModel.InventoryConsumableDtos.Find(i => i.Id == consumable.Id) is null)
                            {
                                <option value="@consumable.Name">@consumable.Name</option>
                            }
                        }
                        @foreach (UsableDto usable in dungeonUsables)
                        {
                            @if (dungeonClassModel.InventoryUsableDtos.Find(i => i.Id == usable.Id) is null)
                            {
                                <option value="@usable.Name">@usable.Name</option>
                            }              
                        }
                        @foreach (WearableDto wearable in dungeonWearables)
                        {
                            @if (dungeonClassModel.InventoryWearableDtos.Find(i => i.Id == wearable.Id) is null)
                            {
                                <option value="@wearable.Name">@wearable.Name</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-auto">
                    @if (defaultItemCount <= 5 && chosenItem != "NoItem")
                    {
                        <button class="btn btn-outline-secondary float-end" type="button" @onclick="AddDefaultItemButtonClicked">Item hinzufügen</button>
                    }
                    else
                    {
                        if (defaultItemCount > 5)
                        {
                            <TooltipComponent Text="Maximum erreicht">
                                <button class="btn btn-outline-secondary float-end" type="button" disabled>Item hinzufügen</button>
                            </TooltipComponent>
                        }
                        else
                        {
                            <TooltipComponent Text="Wähle ein Item aus">
                                <button class="btn btn-outline-secondary float-end" type="button" disabled>Item hinzufügen</button>
                            </TooltipComponent>
                        }
                    }
                </div>
            </div>
            <div class="table table-bordered mt-3">
                @{int itemIndex = 1;}
                @if (!(dungeonClassModel.InventoryTakeableDtos is null))
                {
                    @foreach (TakeableDto takeable in dungeonClassModel.InventoryTakeableDtos)
                    {
                        <div class="card p-0">
                            <div class="row">
                                <div class="col-4">
                                    <div style="vertical-align:middle; text-align:center">
                                        <span><strong>Item @itemIndex</strong></span>
                                    </div>
                                </div>
                                <div class="col">
                                    <div style="vertical-align:middle">
                                        <span>@takeable.Name</span>
                                    </div>
                                </div>
                                <div class="col-1">
                                    <button class="btn btn-outline-secondary " style="width:1.75rem; height:1.75rem; padding: 0" type="button"
                                            @onclick="(() => RemoveTakeableButtonClicked(takeable))">
                                        <TooltipComponent Text="Item entfernen">
                                            <span style="vertical-align:middle"><strong>-</strong></span>
                                        </TooltipComponent>
                                    </button>
                                </div>
                            </div>
                        </div>
                        itemIndex++;
                    }
                }
                @if (!(dungeonClassModel.InventoryConsumableDtos is null))
                {
                    @foreach (ConsumableDto consumable in dungeonClassModel.InventoryConsumableDtos)
                    {
                        <div class="card p-0">
                            <div class="row">
                                <div class="col-4">
                                    <div style="vertical-align:middle; text-align:center">
                                        <span><strong>Item @itemIndex</strong></span>
                                    </div>
                                </div>
                                <div class="col">
                                    <div style="vertical-align:middle">
                                        <span>@consumable.Name</span>
                                    </div>
                                </div>
                                <div class="col-1">
                                    <button class="btn btn-outline-secondary " style="width:1.75rem; height:1.75rem; padding: 0" type="button" 
                                            @onclick="(() => RemoveConsumableButtonClicked(consumable))">
                                        <TooltipComponent Text="Item entfernen">
                                            <span style="vertical-align:middle"><strong>-</strong></span>
                                        </TooltipComponent>
                                    </button>
                                </div>
                            </div>
                        </div>
                        itemIndex++;
                    }
                }
                @if (!(dungeonClassModel.InventoryUsableDtos is null))
                {
                    @foreach (UsableDto usable in dungeonClassModel.InventoryUsableDtos)
                    {
                        <div class="card p-0">
                            <div class="row">
                                <div class="col-4">
                                    <div style="vertical-align:middle; text-align:center">
                                        <span><strong>Item @itemIndex</strong></span>
                                    </div>
                                </div>
                                <div class="col">
                                    <div style="vertical-align:middle">
                                        <span>@usable.Name</span>
                                    </div>
                                </div>
                                <div class="col-1">
                                    <button class="btn btn-outline-secondary " style="width:1.75rem; height:1.75rem; padding: 0" type="button" 
                                            @onclick="(() => RemoveUsableButtonClicked(usable))">
                                        <TooltipComponent Text="Item entfernen">
                                            <span style="vertical-align:middle"><strong>-</strong></span>
                                        </TooltipComponent>
                                    </button>
                                </div>
                            </div>
                        </div>
                        itemIndex++;
                    }
                }
                @if (!(dungeonClassModel.InventoryWearableDtos is null))
                {
                    @foreach (WearableDto wearable in dungeonClassModel.InventoryWearableDtos)
                    {
                        <div class="card p-0">
                            <div class="row">
                                <div class="col-4">
                                    <div style="vertical-align:middle; text-align:center">
                                        <span><strong>Item @itemIndex</strong></span>
                                    </div>
                                </div>
                                <div class="col">
                                    <div style="vertical-align:middle">
                                        <span>@wearable.Name</span>
                                    </div>
                                </div>
                                <div class="col-1">
                                    <button class="btn btn-outline-secondary " style="width:1.75rem; height:1.75rem; padding: 0" type="button" @onclick="(() => RemoveWearableButtonClicked(wearable))">
                                        <TooltipComponent Text="Item entfernen">
                                            <span style="vertical-align:middle"><strong>-</strong></span>
                                        </TooltipComponent>
                                    </button>
                                </div>
                            </div>
                        </div>
                        itemIndex++;
                    }
                }
            </div>

            <hr class="featurette-divider" />

            <div class="form-group mt-3">
                <div class="row">
                    <div class="col-3">
                        <h5 class="mt-1">Status</h5>
                    </div>
                    <div class="col">
                        <div class="d-flex justify-content-center">
                            <select class="form-select" @bind="dungeonClassModel.Status">
                                <option selected hidden value=""></option>
                                <option value="Approved">Aktiv</option>
                                <option value="Pending">Inaktiv</option>
                            </select>
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonClassModel.Status) />
                        </div>
                    </div>
                </div>
            </div>

            <hr class="featurette-divder" />

            <div class="row  d-flex justify-content-center">
                <div class="col-3"></div>
                <div class="col">
                    <button class="btn btn-success" style="width:20rem" type="submit">Speichern</button>
                </div>
                <div class="col">
                    @if (!(chosenClass == "NoClass"))
                    {
                        <button class="btn btn-danger float-end" type="button" @onclick="RemoveClassButtonClicked">Entfernen</button>
                    }
                </div>
            </div>
        </EditForm>

    </div>
</div>

@code {

    #region Dungeon Information

    /// <summary>
    /// Deactives all "Delete" Buttons when true
    /// </summary>
    [Parameter]
    public bool IsDungeonMasterConfigurating { get; set; }

    /// <summary>
    /// The ID of the dungeon being edited used in the components
    /// </summary>
    [Parameter]
    public Guid DungeonId { get; set; }

    ///<summary>
    /// Event fired when the first class of a dungeon is saved or loaded
    ///</summary>
    [Parameter]
    public EventCallback<Guid> OnClassSavedOrLoaded { get; set; }

    #endregion

    #region validation Attributes

    /// <summary>
    /// The attribut of the validation model when creating a new class
    /// </summary>
    DungeonClassModel dungeonClassModel = new DungeonClassModel();

    /// <summary>
    /// The EditContext used by the form
    /// </summary>
    EditContext classContext;

    #endregion

    #region Content Lists

    /// <summary>
    /// The List containing the classes of the Dungeon
    /// </summary>
    List<ClassDto> dungeonClasses = new List<ClassDto>();

    /// <summary>
    /// The List containing the takeable items of the Dungeon
    /// </summary>
    List<TakeableDto> dungeonTakeables = new List<TakeableDto>();

    /// <summary>
    /// The List containing the usable items of the Dungeon
    /// </summary>
    List<UsableDto> dungeonUsables = new List<UsableDto>();

    /// <summary>
    /// The list containing the wearable items of the dungeon
    /// </summary>
    List<WearableDto> dungeonWearables = new List<WearableDto>();

    /// <summary>
    /// The List containing the consumable items of the dungeon
    /// </summary>
    List<ConsumableDto> dungeonConsumables = new List<ConsumableDto>();

    #endregion

    #region Help variables

    /// <summary>
    /// The 1-based counter of default items per class
    /// </summary>
    int defaultItemCount = 1;

    #endregion

    #region Bound variables

    /// <summary>
    /// The string bound to the class selection, NoClass means no class is selected
    /// </summary>
    private string chosenClass = "NoClass";

    /// <summary>
    /// The string array bound to the maximum of default items per class
    /// </summary>
    string[] classItems = new string[5];

    /// <summary>
    /// The string bound to the item selection, NoItem means no item is selected
    /// </summary>
    private string chosenItem = "NoItem";

    #endregion

    #region Methods
    /// <summary>
    /// Called when the component is initialized, this method instantiates the EditContext of the form, receives data from the backend and saves them locally
    /// </summary>
    protected async override Task OnInitializedAsync()
    {
        classContext = new EditContext(dungeonClassModel);
        if (DungeonId != Guid.Empty)
        {
            var dungeonClassCollection = await ClassService.GetAllClasses(DungeonId);
            if (!(dungeonClassCollection is null) && dungeonClassCollection.Count != 0)
            {
                dungeonClasses = dungeonClassCollection.ToList();
                await OnClassSavedOrLoaded.InvokeAsync();
            }
            dungeonTakeables = (await TakeableService.GetAllTakeables(DungeonId))?.ToList() ?? new List<TakeableDto>();
            dungeonWearables = (await WearableService.GetAllWearables(DungeonId))?.ToList() ?? new List<WearableDto>();
            dungeonUsables = (await UsableService.GetAllUsables(DungeonId))?.ToList() ?? new List<UsableDto>();
            dungeonConsumables = (await ConsumableService.GetAllConsumables(DungeonId))?.ToList() ?? new List<ConsumableDto>();
        }
        StateHasChanged();
    }

    /// <summary>
    /// Handles the submition of a created class, validates the data and saves them locally and on the server
    /// </summary>
    /// <returns></returns>
    private async Task HandleClassSubmit()
    {
        ///TODO Als Task erstellen, damit es parallel läuft
        var validClass = classContext.Validate();
        if (validClass && DungeonId != Guid.Empty)
        {
            bool newClass = false;
            ClassDto submitClass = dungeonClasses.Find(i => i.Name.Equals(dungeonClassModel.Name));
            if (submitClass is null)
            {
                submitClass = new ClassDto();
                newClass = true;
            }
            submitClass.Name = dungeonClassModel.Name;
            submitClass.Description = dungeonClassModel.Description;
            submitClass.DefaultHealth = dungeonClassModel.Health ?? 1;
            submitClass.DefaultDamage = dungeonClassModel.Damage ?? 1;
            submitClass.DefaultProtection = dungeonClassModel.Protection ?? 1;
            submitClass.InventoryTakeableDtos = dungeonClassModel.InventoryTakeableDtos;
            submitClass.InventoryConsumableDtos = dungeonClassModel.InventoryConsumableDtos;
            submitClass.InventoryUsableDtos = dungeonClassModel.InventoryUsableDtos;
            submitClass.InventoryWearableDtos = dungeonClassModel.InventoryWearableDtos;
            submitClass.Status = dungeonClassModel.Status.Equals("Approved") ? 0 : 1;
            if (newClass)
            {
                var response = await ClassService.CreateNewClass(submitClass, DungeonId);
                if (response != Guid.Empty)
                {
                    submitClass.Id = response;
                    await OnClassSavedOrLoaded.InvokeAsync();
                    dungeonClasses.Add(submitClass);
                    chosenClass = dungeonClassModel.Name;
                }
            }
            else
            {
                var response = await ClassService.UpdateClass(submitClass, DungeonId);
                if (!(response is null)) WriteBackClass(response);
            }
            StateHasChanged();
        }
    }

    /// <summary>
    /// Adds a default class item
    /// </summary>
    private void AddDefaultItemButtonClicked()
    {
        if (chosenItem != "NoItem")
        {
            var newTakeable = dungeonTakeables.Find(i => i.Name.Equals(chosenItem));
            var newConsumable = dungeonConsumables.Find(i => i.Name.Equals(chosenItem));
            var newUsable = dungeonUsables.Find(i => i.Name.Equals(chosenItem));
            var newWearable = dungeonWearables.Find(i => i.Name.Equals(chosenItem));

            if (!(newTakeable is null))
            {
                dungeonClassModel.InventoryTakeableDtos.Add(newTakeable);
            }
            if (!(newConsumable is null))
            {
                dungeonClassModel.InventoryConsumableDtos.Add(newConsumable);
            }
            if (!(newUsable is null))
            {
                dungeonClassModel.InventoryUsableDtos.Add(newUsable);
            }
            if (!(newWearable is null))
            {
                dungeonClassModel.InventoryWearableDtos.Add(newWearable);
            }
            if (defaultItemCount < 5)
            {
                defaultItemCount++;
            }
            chosenItem = "NoItem";
            StateHasChanged();
        }

    }

    /// <summary>
    /// TODO
    /// </summary>
    private EventCallback RemoveTakeableButtonClicked(TakeableDto item)
    {
        dungeonClassModel.InventoryTakeableDtos.Remove(item);
        if (defaultItemCount > 1)
            defaultItemCount--;
        return EventCallback.Empty;
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    private EventCallback RemoveConsumableButtonClicked(ConsumableDto item)
    {
        dungeonClassModel.InventoryConsumableDtos.Remove(item);
        if (defaultItemCount > 1)
            defaultItemCount--;
        return EventCallback.Empty;
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    private EventCallback RemoveUsableButtonClicked(UsableDto item)
    {
        dungeonClassModel.InventoryUsableDtos.Remove(item);
        if (defaultItemCount > 1)
            defaultItemCount--;
        return EventCallback.Empty;
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    private EventCallback RemoveWearableButtonClicked(WearableDto item)
    {
        dungeonClassModel.InventoryWearableDtos.Remove(item);
        if (defaultItemCount > 1)
            defaultItemCount--;
        return EventCallback.Empty;
    }

    /// <summary>
    /// Called when the user selects a new class, this method fills out the form according to the selected class
    /// </summary>
    /// <param name="args">Event Arguments</param>
    private EventCallback ClassSelectionChanged()
    {
        if (!chosenClass.Equals(dungeonClassModel.Name) && !chosenClass.Equals("NoClass"))
        {
            var selectedClass = dungeonClasses.Find(i => i.Name.Equals(chosenClass));
            WriteBackClass(selectedClass);
        }
        return EventCallback.Empty;
    }

    /// <summary>
    /// Refills the form when needed, according to the classname
    /// </summary>
    /// <param name="className"></param>
    private void WriteBackClass(ClassDto newClass)
    {
        if (!(newClass is null))
        {
            dungeonClassModel.InventoryTakeableDtos = new List<TakeableDto>();
            dungeonClassModel.InventoryConsumableDtos = new List<ConsumableDto>();
            dungeonClassModel.InventoryUsableDtos = new List<UsableDto>();
            dungeonClassModel.InventoryWearableDtos = new List<WearableDto>();
            dungeonClassModel.Name = newClass.Name;
            dungeonClassModel.Description = newClass.Description;
            dungeonClassModel.Health = newClass.DefaultHealth;
            dungeonClassModel.Protection = newClass.DefaultProtection;
            dungeonClassModel.Damage = newClass.DefaultDamage;
            dungeonClassModel.Status = newClass.Status == 0 ? "Approved" : "Pending";
            if (!(newClass.InventoryTakeableDtos is null))
            {
                newClass.InventoryTakeableDtos.ToList().ForEach(t =>
                {
                    if (!(t is null))
                    {
                        dungeonClassModel.InventoryTakeableDtos.Add(t);
                    }
                });
            }
            if (!(newClass.InventoryConsumableDtos is null))
            {
                newClass.InventoryConsumableDtos.ToList().ForEach(t =>
                {
                    if (!(t is null))
                    {
                        dungeonClassModel.InventoryConsumableDtos.Add(t);
                    }
                });
            }
            if (!(newClass.InventoryUsableDtos is null))
            {
                newClass.InventoryUsableDtos.ToList().ForEach(t =>
                {
                    if (!(t is null))
                    {
                        dungeonClassModel.InventoryUsableDtos.Add(t);
                    }
                });
            }
            if (!(newClass.InventoryWearableDtos is null))
            {
                newClass.InventoryWearableDtos.ToList().ForEach(t =>
                {
                    if (!(t is null))
                    {
                        dungeonClassModel.InventoryWearableDtos.Add(t);
                    }
                });
            }
        }
    }

    /// <summary>
    /// When the Name field loses its focus, this Method checks wether a class with this name already exists and if so fills out the form accordingly
    ///</summary>
    ///<param name="args">Event Arguments</param>
    private void NameFieldLostFocus(FocusEventArgs args)
    {
        ClassDto checkClass = dungeonClasses.Find(i => i.Name.Equals(dungeonClassModel.Name));
        if (checkClass is null)
        {
            return;
        }
        else
        {
            chosenClass = checkClass.Name;
            WriteBackClass(checkClass);
        }
    }

    /// <summary>
    /// To create a new class this Method clears all form input fields
    ///</summary>
    ///<param name="args">Event Arguments</param>
    private void NewClassButtonClicked(System.EventArgs args)
    {
        chosenClass = "NoClass";
        dungeonClassModel.Name = string.Empty;
        dungeonClassModel.Description = string.Empty;
        dungeonClassModel.Health = null;
        dungeonClassModel.Protection = null;
        dungeonClassModel.Damage = null;
        dungeonClassModel.Status = string.Empty;
        defaultItemCount = 1;
        dungeonClassModel.InventoryTakeableDtos = new List<TakeableDto>();
        dungeonClassModel.InventoryConsumableDtos = new List<ConsumableDto>();
        dungeonClassModel.InventoryUsableDtos = new List<UsableDto>();
        dungeonClassModel.InventoryWearableDtos = new List<WearableDto>();
    }

    /// <summary>
    /// To delete an existing class of the dungeon
    ///</summary>
    ///<param name="args">Event Arguments</param>
    private async void RemoveClassButtonClicked(System.EventArgs args)
    {
        var classToDelete = dungeonClasses.Find(c => c.Name == chosenClass);

        bool shouldFieldsBeEmptied = true;

        if (!(classToDelete.Id == Guid.Empty)) shouldFieldsBeEmptied = await ClassService.DeleteClass(classToDelete.Id, DungeonId);

        if (shouldFieldsBeEmptied)
        {
            dungeonClasses.Remove(classToDelete);
            chosenClass = "NoClass";
            dungeonClassModel.Name = string.Empty;
            dungeonClassModel.Description = string.Empty;
            dungeonClassModel.Health = null;
            dungeonClassModel.Protection = null;
            dungeonClassModel.Damage = null;
            dungeonClassModel.Status = string.Empty;
            defaultItemCount = 1;
            dungeonClassModel.InventoryTakeableDtos = new List<TakeableDto>();
            dungeonClassModel.InventoryConsumableDtos = new List<ConsumableDto>();
            dungeonClassModel.InventoryUsableDtos = new List<UsableDto>();
            dungeonClassModel.InventoryWearableDtos = new List<WearableDto>();
            StateHasChanged();
        }
        else
        {
            //TODO Maybe Nutzer hinweisen
        }
    }

    /// <summary>
    /// TODO
    /// </summary>
    /// <param name="typeName"></param>
    public async void ReloadItems(string typeName)
    {
        switch (typeName)
        {
            case "Takeable":
                var takeableList = await TakeableService.GetAllTakeables(DungeonId);
                if (takeableList != null) dungeonTakeables = takeableList.ToList();
                break;
            case "Usable":
                var usableList = await UsableService.GetAllUsables(DungeonId);
                if (usableList != null) dungeonUsables = usableList.ToList();
                break;
            case "Wearable":
                var wearableList = await WearableService.GetAllWearables(DungeonId);
                if (wearableList != null) dungeonWearables = wearableList.ToList();
                break;
            case "Consumable":
                var consumableList = await ConsumableService.GetAllConsumables(DungeonId);
                if (consumableList != null) dungeonConsumables = consumableList.ToList();
                break;
        }
        StateHasChanged();

    }
    #endregion
}
