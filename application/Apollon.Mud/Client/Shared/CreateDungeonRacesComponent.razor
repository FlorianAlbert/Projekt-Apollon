@using Apollon.Mud.Client.Data.Models
@using Apollon.Mud.Shared.Dungeon.Race

<div class="card">
    <div class="card-header">
        <h2>Rassen</h2>
    </div>
    <div class="card-body">

        <EditForm EditContext="@raceContext" OnSubmit="@HandleRaceSubmit" novalidate>
            <DataAnnotationsValidator />

            <div class="form-group">
                <div class="row">
                    <div class="col-md-3">
                        <h5 class="mt-1">Rassenauswahl</h5>
                    </div>
                    <div class="col-md-auto">
                        <div class="d-flex justify-content-center">
                            <select class="form-select" aria-label="Default select example" style="width:21rem">
                                @if (!(dungeonRaces is null))
                                {
                                    @foreach (RaceDto dungeonRace in dungeonRaces)
                                    {
                                        <option selected value="@dungeonRace.Name">@dungeonRace.Name</option>
                                    }
                                }
                            </select>

                            <button class="btn btn-outline-primary ms-3" style="width:3rem; font-size:20px" type="button" ><TooltipComponent Text="Neue Rasse erstellen"><strong>+</strong></TooltipComponent></button>

                        </div>
                    </div>
                </div>
            </div>

            <hr class="featurette-divider" />

            <div class="form-group mt-2">
                <div class="row">
                    <div class="col-md-3">
                        <h5 class="mt-1">Name</h5>
                    </div>
                    <div class="col-md-auto">
                        <div class="d-flex justify-content-center">
                            <InputText class="form-control" style="width:25rem" placeholder="Name" id="Name" @bind-Value="dungeonRaceModel.Name" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonRaceModel.Name) />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-md-3">
                        <h5 class="mt-1">Beschreibung</h5>
                    </div>
                    <div class="col-md-auto">
                        <div class="d-flex justify-content-center">
                            <InputTextArea class="form-control" style="width:25rem" placeholder="Beschreibung" @bind-Value="dungeonRaceModel.Description" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonRaceModel.Description) />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-md-3">
                        <h5 class="mt-1">Lebenspunkte</h5>
                    </div>
                    <div class="col-md-auto">
                        <div class="d-flex justify-content-center">
                            <InputText class="form-control" style="width:25rem" placeholder="Lebenspunkte" type="number<Int64>" @bind-Value="dungeonRaceModel.Health" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonRaceModel.Health) />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-md-3">
                        <h5 class="mt-1">Schaden</h5>
                    </div>
                    <div class="col-md-auto">
                        <div class="d-flex justify-content-center">
                            <InputText class="form-control" style="width:25rem" placeholder="Schaden" type="number" @bind-Value="dungeonRaceModel.Damage" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonRaceModel.Damage) />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group mt-5">
                <div class="row">
                    <div class="col-md-3">
                        <h5 class="mt-1">Verteidigung</h5>
                    </div>
                    <div class="col-md-auto">
                        <div class="d-flex justify-content-center">
                            <InputText class="form-control" style="width:25rem" placeholder="Verteidigung" type="number" @bind-Value="dungeonRaceModel.Protection" />
                        </div>
                        <div class="text-danger">
                            <ValidationMessage For=@(() => dungeonRaceModel.Protection) />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-3"></div>
                <div class="col-md-auto">
                    <button class="btn btn-success mt-5" style="width:25rem" type="submit">Speichern</button>
                </div>
            </div>
        </EditForm>

    </div>
</div>

@code {

    DungeonRaceModel dungeonRaceModel = new DungeonRaceModel();

    EditContext raceContext;

    List<RaceDto> dungeonRaces = new List<RaceDto>();

    protected override void OnInitialized()
    {
        raceContext = new EditContext(dungeonRaceModel);

        RaceDto testRace = new RaceDto();
        testRace.DefaultDamage = 10;
        testRace.DefaultHealth = 10;
        testRace.DefaultProtection = 10;
        testRace.Description = "stinkt";
        testRace.Name = "Leon";

        dungeonRaces.Add(testRace);
    }

    private async Task HandleRaceSubmit()
    {
        var validRace = raceContext.Validate();
        if (validRace)
        {
            //TODO
        }
        else
        {
            //TODO
        }
    }



}